{
  "hash": "78aa431ed68832ae4b64bf80295ff41f",
  "result": {
    "markdown": "---\ntitle: \"Construction of a Historical S&P 500 Total Return Index\"\nauthor:\n  - name: Christoph Scheuch\n    url: https://christophscheuch.github.io/\n    affiliations:\n      - name: wikifolio Financial Technologies AG\n      - name: WU Vienna University of Economics and Business\ndate: \"2023-02-15\"\ndescription: An approximation of total returns using Robert Shiller's stock market data\nimage: thumbnail.jpg\ncategories: \n  - Data\n---\n\n\nI wanted to simulate simple equity savings plans over long time horizons and many different initiation periods for a story with the German news portal [t-online](https://www.t-online.de/finanzen/geld-vorsorge/geldanlage/id_88931406/exklusive-daten-simulation-so-verlieren-sie-langfristig-kein-geld-an-der-boerse.html). The good thing is that the S&P 500 index provides a great starting point as it is easily available since 1928 via [Yahoo Finance](https://finance.yahoo.com/quote/%5EGSPC/). However, I wanted my savings plans to be accumulating, i.e., all cash distributions are reinvested in the savings plan. The S&P index is inadequate for this situation as it is a price index that only tracks its components’ price movements. The [S&P 500 Total Return Index](https://finance.yahoo.com/quote/%5ESP500TR/) tracks the overall performance of the S&P 500 and would be the solution to my problem, but it is only available since 1988. \n\nFortunately, I came up with a solution using data provided by [Robert Shiller](http://www.econ.yale.edu/~shiller/) and provide the complete code below for future reference. If you spot any errors or have better suggestions, please feel free to create an issue.\n\nThis is the set of packages I use throughout this post. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # for overall grammar\nlibrary(tidyquant) # to download data from yahoo finance\nlibrary(glue)      # to automatically construct figure captions\nlibrary(scales)    # for nicer axis labels \nlibrary(readxl)    # to read Shiller's data \n```\n:::\n\n\nFirst, let us download the S&P 500 Total Return Index from Yahoo Finance. I only consider the closing prices of the last day of each month because my savings plans only transfer funds once a month. In principle, you could also approximate the daily time series, but I believe it will be noiser because Shiller only provides monthly data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp500_recent <-  tq_get(\"^SP500TR\", get = \"stock.prices\",\n                        from = \"1988-01-04\", to = \"2023-01-31\") |>\n  select(date, total_return_index = close) |>\n  drop_na() |>\n  group_by(month = ceiling_date(date, \"month\")-1) |>\n  arrange(date) |>\n  filter(date == max(date)) |>\n  ungroup() |>\n  select(month, total_return_index)\n```\n:::\n\n\nNext, I download data from [Robert Shiller’s website](http://www.econ.yale.edu/~shiller/data.htm) that he used in his great book [Irrational Excuberance](https://press.princeton.edu/books/paperback/9780691173122/irrational-exuberance). I create a temporary file and read the relevant sheet. In particular, the data contains monthly S&P 500 price and dividend data. The original file has a bit of annoying date format that I have to correct before parsing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- tempfile(fileext = \".xls\")\n\ndownload.file(url = \"http://www.econ.yale.edu/~shiller/data/ie_data.xls\",\n              destfile = temp, mode='wb')\n\nshiller_historical <- read_excel(temp, sheet = \"Data\", skip = 7) |>\n  transmute(month = ceiling_date(ymd(str_replace(str_c(Date, \".01\"), \"\\\\.1\\\\.\", \"\\\\.10\\\\.\")), \"month\")-1,\n            price = as.numeric(P),\n            dividend = as.numeric(D)) \n```\n:::\n\n\nTo construct the total return index, I need a return that includes dividends. In the next code chunk, I compute monthly total returns of the S&P 500 index by incorporating the monthly dividend paid on the index in the corresponding month. Note that Shiller’s data contains the 12-month moving sum of monthly dividends, hence the division by 12. Admittedly, this is a brute force approximation, but I couldn’t come up with a better solution so far.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshiller_historical <- shiller_historical |>\n  arrange(month) |>\n  mutate(ret = (price + dividend / 12) / lag(price) - 1)\n```\n:::\n\n\nBefore I go back in time, let us check whether the total return computed above is able to match the actual total return since 1988. I start with the first total return index number that is available and use the cumulative product of returns from above to construct the check time series.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck <- shiller_historical |>\n  full_join(sp500_recent, by = \"month\") |>\n  filter(!is.na(total_return_index)) |>\n  arrange(month) |>\n  mutate(ret = if_else(row_number() == 1, 0, ret), # ignore first month return\n         total_return_check = total_return_index[1] * cumprod(1 + ret)) |>\n  drop_na()\n```\n:::\n\n\nThe correlation between the actual time series and the check is remarkably high which gives me confidence in the method I propose here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck |> \n  select(total_return_index, total_return_check) |>  \n  cor()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   total_return_index total_return_check\ntotal_return_index              1.000              0.999\ntotal_return_check              0.999              1.000\n```\n:::\n:::\n\n\nIn addition, the visual inspection of the two time series in @fig-sp500-1 corroborates my confidence. Note that both the actual and the simulated total return indexes start at the same index value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck |>\n  select(month, Actual = total_return_index, Simulated = total_return_check) |>\n  pivot_longer(cols = -month) |>\n  ggplot(aes(x = month, y = value, color = name)) +\n  geom_line() +\n  scale_y_continuous(labels = comma)+ \n  labs(x = NULL, y = NULL, color = NULL,\n       title = \"Actual and simulated S&P 500 Total Return index\",\n       subtitle = glue(\"Both indexes start at {min(check$month)}\"))\n```\n\n::: {.cell-output-display}\n![Simluated and actual S&P 500 Total Return index data move closely together.](index_files/figure-html/fig-sp500-1-1.png){#fig-sp500-1 fig-alt='Title: Actual and simulated S&P 500 Total Return index. The figure shows that actual and simulated S&P 500 total return index data move very closely together.' width=2100}\n:::\n:::\n\n\nNow, let us use the same logic to construct the total return index for the time before 1988. Note that I just sort the months in descending order and divide by the cumulative product of the total return from Shiller’s data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp500_historical <- sp500_recent |> \n  filter(month == min(month)) |>\n  full_join(shiller_historical |>\n              filter(month <= min(sp500_recent$month)), by = \"month\") |>\n  arrange(desc(month)) |>\n  mutate(ret = if_else(row_number() == 1, 0, ret),\n         total_return_index = total_return_index[1] / cumprod(1 + ret))\n```\n:::\n\n\nBefore we take a look at the results, I also add the S&P price index from Yahoo Finance for comparison.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp500_price_index <- tq_get(\"^GSPC\", get = \"stock.prices\",\n                            from = \"1928-01-01\", to = \"2023-01-31\") |>\n  select(date, price_index = close) |>\n  drop_na() |>\n  group_by(month = ceiling_date(date, \"month\") - 1) |>\n  arrange(date) |>\n  filter(date == max(date)) |>\n  ungroup() |>\n  select(month, price_index)\n```\n:::\n\n\nFinally, let us combine (i) the actual S&P 500 Total Return Index from 1988 until 2023, (ii) the simulated S&P 500 total return index before 1988, and (iii) the S&P 500 price index from 1928 until 2023.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp500_monthly <- sp500_recent|>\n  bind_rows(sp500_historical |>\n              filter(month < min(sp500_recent$month))  |>\n              select(month, total_return_index)) |>\n  full_join(sp500_price_index |> \n              select(month, price_index), by = \"month\") |>\n  filter(month >= \"1928-01-01\")  |>\n  arrange(month)\nsp500_monthly\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,141 × 3\n  month      total_return_index price_index\n  <date>                  <dbl>       <dbl>\n1 1928-01-31               1.20        17.6\n2 1928-02-29               1.21        17.3\n3 1928-03-31               1.20        19.3\n4 1928-04-30               1.26        19.8\n5 1928-05-31               1.35        20  \n# ℹ 1,136 more rows\n```\n:::\n:::\n\n\n@fig-sp500-2 shows the dramatic differences in cumulative returns if you only consider price changes, as the S&P 500 Index does, versus total returns with reinvested capital gains. Note that I plot the indexes in log scale, otherwise everything until the last couple of decades would look like a flat line. I believe it is also important to keep the differences between price and performance indexes in mind whenever you compare equity indexes across countries. For instance, the DAX is a performance index by default and should never be compared with the S&P 500 price index.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp500_monthly |>\n  select(month, \n         `Price Index` = price_index, \n         `Total Return Index` = total_return_index) |>\n  pivot_longer(cols = -month) |>\n  group_by(name) |>\n  arrange(month) |>\n  mutate(value = value / value[1] * 100) |>\n  ggplot(aes(x = month, y = value, color = name)) +\n  geom_line() +\n  scale_y_log10(labels = comma) +\n  scale_x_date(expand = c(0, 0), date_breaks = \"10 years\", date_labels = \"%Y\") + \n  labs(x = NULL, y = NULL, color = NULL,\n       title = \"S&P 500 Price index and Total Return index since 1928\",\n       subtitle = glue(\"Both indexes are normalized to 100 at {min(sp500_monthly$month)}\"))\n```\n\n::: {.cell-output-display}\n![Using total return data yields dramatically higher cumulative returns over a few decades.](index_files/figure-html/fig-sp500-2-1.png){#fig-sp500-2 fig-alt='Title: S&P 500 index and Total Return index since 1928. The figure shows dramatic differences in cumulative returns over a few of decades. The figure emphasizes the importance of using total returns indexes to simulate long-term investment decisions.' width=2100}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}