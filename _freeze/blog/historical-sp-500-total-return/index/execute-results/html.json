{
  "hash": "8c4232accd83849c74259c17f7193460",
  "result": {
    "markdown": "---\ntitle: \"Construction of a Historical S&P 500 Total Return Index\"\nauthor: [Christoph Scheuch]\ndate: \"2023-02-15\"\ndescription: An approximation of total returns using Robert Shiller's stock market data\nimage: thumbnail.jpg\ncategories: \n  - Data\n---\n\n\nNOTE: I NEED TO REFACTOR ALL CODE TO MAKE IT MORE COMPLIANT WITH OUR STYLE FROM THE BOOK. I JUST RENDERED THIS PAGE TO DISCUSS WHETHER WE REALLY WANT TO INCLUDE IT.\n\nI recently wanted to simulate simple equity savings plans over long time horizons and many different starting periods. The good thing is that the S&P 500 index provides a great starting point as it is easily available since 1928 via [Yahoo Finance](https://finance.yahoo.com/quote/%5EGSPC/). However, I wanted my savings plans to be accumulating, i.e., all cash distributions are reinvested in the savings plan. The S&P index is inadequate for this situation as it is a price index that only tracks its components’ price movements. The [S&P 500 Total Return Index](https://finance.yahoo.com/quote/%5ESP500TR/) tracks the overall performance of the S&P 500 and would be the solution to my problem, but it is only available since 1988.\n\nFortunately, I came up with a solution using data provided by [Robert Shiller](http://www.econ.yale.edu/~shiller/) and provide the complete code below for future reference. If you spot any errors or have better suggestions, please feel free to create an issue.\n\nThis is the set of packages I use throughout this note.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # for overall grammar\nlibrary(lubridate) # to parse dates\nlibrary(tidyquant) # to download data from yahoo finance\nlibrary(glue)      # to automatically construct figure captions\nlibrary(scales)    # for nicer axis labels \nlibrary(readxl)    # to read Shiller's data \n```\n:::\n\n\nFirst, let us download the S&P 500 Total Return Index from Yahoo Finance. I only consider the closing prices of the last day of each month because my savings plans only transfer funds once a month. In principle, you could also approximate the daily time series, but I believe it will be noiser because Shiller only provides monthly data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl.SP500Recent <-  tq_get(\"^SP500TR\", get = \"stock.prices\",\n                           from = \"1988-01-04\", to = \"2020-10-31\") %>%\n  transmute(Date = date, TotalReturnIndex = close) %>%\n  na.omit() %>%\n  group_by(Month = ceiling_date(Date, \"month\")-1) %>%\n  arrange(Date) %>%\n  filter(Date == max(Date)) %>%\n  ungroup() %>%\n  select(Month, TotalReturnIndex)\n```\n:::\n\n\nNext, I download data from [Robert Shiller’s website](http://www.econ.yale.edu/~shiller/data.htm) used in his great book [Irrational Excuberance](https://press.princeton.edu/books/paperback/9780691173122/irrational-exuberance) into a temporary file and read the relevant sheet. In particular, the data contains monthly S&P 500 price and dividend data. The original file has a bit of annoying date format that I have to correct before parsing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- tempfile(fileext = \".xls\")\n\ndownload.file(url = \"http://www.econ.yale.edu/~shiller/data/ie_data.xls\",\n              destfile = temp, mode='wb')\n\ntbl.ShillerHistorical <- read_excel(temp, sheet = \"Data\", skip = 7) %>%\n  transmute(Month = ceiling_date(ymd(str_replace(str_c(Date, \".01\"), \"\\\\.1\\\\.\", \"\\\\.10\\\\.\")), \"month\")-1,\n            Price = as.numeric(P),\n            Dividend = as.numeric(D)) \n```\n:::\n\n\nTo construct the total return index, I need a return figure that includes dividends. In the next code chunk, I compute monthly total returns of the S&P 500 index by incorporating the monthly dividend paid on the index in the corresponding month. Note that Shiller’s data contains the 12-month moving sum of monthly dividends, hence the division by 12. Admittedly, this is a brute force approximation, but I couldn’t come up with a better solution ad hoc.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl.ShillerHistorical <- tbl.ShillerHistorical %>%\n  arrange(Month) %>%\n  mutate(Ret = (Price + Dividend / 12) / lag(Price) - 1)\n```\n:::\n\n\nBefore I go back in time, let us check whether the total return computed above is able to match the actual total return since 1988. I start with the first total return index number that is available and use the cumulative product of returns from above to construct the check time series.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl.Check <- tbl.ShillerHistorical %>%\n  full_join(tbl.SP500Recent, by = \"Month\") %>%\n  filter(!is.na(TotalReturnIndex)) %>%\n  arrange(Month) %>%\n  mutate(Ret = if_else(row_number() == 1, 0, Ret), # ignore first month return\n         TotalReturnCheck = TotalReturnIndex[1] * cumprod(1 + Ret)) %>%\n  na.omit()\n```\n:::\n\n\nThe correlation between the actual time series and the check is remarkably high which gives me confidence in the method I propose here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(tbl.Check$TotalReturnIndex, tbl.Check$TotalReturnCheck)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.999\n```\n:::\n:::\n\n\nIn addition, the visual inspection of the two time series corroborates my confidence. Note that both the actual and the simulated total return indexes start at the same index value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfig.Check <- tbl.Check %>%\n  select(Month, Actual = TotalReturnIndex, Simulated = TotalReturnCheck) %>%\n  pivot_longer(cols = -Month, names_to = \"Type\", values_to = \"Value\") %>%\n  ggplot(aes(x = Month, y = Value, color = Type)) +\n  geom_line() +\n  theme_bw() +\n  scale_y_continuous(labels = comma)+ \n  labs(x = NULL, y = NULL,\n       title = \"Actual and Simulated S&P 500 Total Return Index\",\n       subtitle = glue(\"Both Indexes start at {min(tbl.Check$Month)}\"))\nfig.Check\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=2100}\n:::\n:::\n\n\nNow, let us use the same logic to construct the total return index for the time before 1988. Note that I just sort the months in descending order and divide by the cumulative product of the total return from Shiller’s data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl.SP500Historical <- tbl.SP500Recent %>% \n  filter(Month == min(Month)) %>%\n  full_join(tbl.ShillerHistorical %>%\n              filter(Month <= min(tbl.SP500Recent$Month)), by = \"Month\") %>%\n  arrange(desc(Month)) %>%\n  mutate(Ret = if_else(row_number() == 1, 0, Ret), # ignore first month return\n         TotalReturnIndex = TotalReturnIndex[1] / cumprod(1 + Ret))\n```\n:::\n\n\nBefore we take a look at the results, I also add the S&P price index from Yahoo Finance for comparison.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl.SP500Index <- tq_get(\"^GSPC\", get = \"stock.prices\",\n                         from = \"1928-01-01\", to = \"2020-10-31\") %>%\n  transmute(Date = date, Index = close) %>%\n  na.omit() %>%\n  group_by(Month = ceiling_date(Date, \"month\") - 1) %>%\n  arrange(Date) %>%\n  filter(Date == max(Date)) %>%\n  ungroup() %>%\n  select(Month, Index)\n```\n:::\n\n\nFinally, let us combine (i) the actual S&P 500 Total Return Index from 1988 until 2020, (ii) the simulated S&P 500 total return index before 1988, and (iii) the S&P 500 price index from 1928 until 2020.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl.SP500Monthly <- tbl.SP500Recent%>%\n  bind_rows(tbl.SP500Historical %>%\n              filter(Month < min(tbl.SP500Recent$Month))  %>%\n              select(Month, TotalReturnIndex)) %>%\n  full_join(tbl.SP500Index %>% \n              select(Month, Index), by = \"Month\") %>%\n  filter(Month >= \"1928-01-01\")  %>%\n  arrange(Month)\ntbl.SP500Monthly\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,114 × 3\n  Month      TotalReturnIndex Index\n  <date>                <dbl> <dbl>\n1 1928-01-31             1.20  17.6\n2 1928-02-29             1.21  17.3\n3 1928-03-31             1.20  19.3\n4 1928-04-30             1.26  19.8\n5 1928-05-31             1.35  20  \n# … with 1,109 more rows\n```\n:::\n:::\n\n\nThe plot below shows you the dramatic differences in cumulative returns if you only consider price changes, as the S&P 500 Index does, versus total returns with reinvested capital gains. Note that I plot the indexes in log scale, otherwise everything until the last couple of decades would look like a flat line. I believe it is also important to keep the differences between price and performance indexes in mind whenever you compare equity indexes across countries. For instance, the DAX is a performance index by default and should never be compared with the S&P 500 price index.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfig.Historical <- tbl.SP500Monthly %>%\n  select(Month, Index, `Total Return` = TotalReturnIndex) %>%\n  pivot_longer(cols = -Month, names_to = \"Type\", values_to = \"Value\") %>%\n  group_by(Type) %>%\n  arrange(Month) %>%\n  mutate(Value = Value / Value[1] * 100) %>%\n  ggplot(aes(x = Month, y = Value, color = Type)) +\n  geom_line() +\n  theme_bw() +\n  scale_y_log10(labels = comma) +\n  scale_x_date(expand = c(0, 0), date_breaks = \"10 years\", date_labels = \"%Y\") + \n  labs(x = NULL, y = NULL,\n       title = \"S&P 500 Index and Total Return Index Since 1928\",\n       subtitle = glue(\"Both Indexes are Normalized to 100 at {min(tbl.SP500Monthly$Month)}\"))\nfig.Historical\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=2100}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}