{
  "hash": "037b844b5d596ee14bf8f6726b33c966",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"tidyfinance 0.4.0: new data downloads\"\nauthor:\n  - name: Christoph Scheuch\n    url: https://www.linkedin.com/in/christophscheuch/\n    affiliations:\n      - name: Independent\n  - name: Stefan Voigt\n    url: https://www.voigtstefan.me/\n    affiliations:\n      - name: University of Copenhagen\n      - name: Danish Finance Institute\n  - name: Patrick Weiss\n    url: https://sites.google.com/view/patrick-weiss\n    affiliations:\n      - name: Reykjavik University\n      - name: WU Vienna University of Economics and Business\ndate: \"2024-08-30\"\ndescription: tidyfinance 0.4.0 is now on CRAN. Discover the new data download options it includes. \nimage: thumbnail.png\nimage-alt: Abstract illustration of a data flow pipeline with arrows and lines moving from financial icons like stock charts, currency symbols, and graphs towards a central tidy data frame. The background features a gradient of deep blues and greens, symbolizing finance and technology. The text ‘tidyfinance 0.4.0’ and a small CRAN logo are prominently displayed, with additional subtle financial icons integrated into the design. Created with DALL-E.\ncategories: \n  - Data\n  - R\n--- \n\n\n\nWe are happy to annouce the release of version 0.4.0 of the `tidyfinance` R package [on CRAN](https://CRAN.R-project.org/package=tidyfinance). The package contains a set of helper functions for empirical research in financial economics, addressing a variety of topics covered in [Tidy Finance with R](../../r/index.qmd) (TFWR). We designed the package to provide easy shortcuts for the applications that we discuss in the book. If you want to inspect the details of the package or propose new features, feel free to visit the package repository on [Github](https://github.com/tidy-finance/r-tidyfinance).\n\nAs the new release brings many new features, we split them up into two blog posts. In this blog post, we discuss the new data downloads that `tidyfinance` now supports. \n\n## Install the package\n\nYou can install the released version of `tidyfinance` from CRAN via:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyfinance\")\n```\n:::\n\n\n\nYou can install the development version of tidyfinance from GitHub using the `pak` package:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pak(\"tidy-finance/r-tidyfinance\")\n```\n:::\n\n\n\nYou then load the package via:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyfinance)\n```\n:::\n\n\n\n## Download stock data\n\nYou can download stock prices from [Yahoo Finance](https://finance.yahoo.com/) using the type `stock_prices` and provide symbols:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload_data(\"stock_prices\", symbols = c(\"AAPL\", \"MSFT\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNo `start_date` or `end_date` provided.\nUsing the range 2022-08-28 to 2023-08-28 to avoid downloading large\namounts of data.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 500 × 8\n  symbol date         volume  open   low  high close adjusted_close\n  <chr>  <date>        <dbl> <dbl> <dbl> <dbl> <dbl>          <dbl>\n1 AAPL   2022-08-29 73314000  161.  160.  163.  161.           160.\n2 AAPL   2022-08-30 77906200  162.  158.  163.  159.           157.\n3 AAPL   2022-08-31 87991100  160.  157.  161.  157.           155.\n4 AAPL   2022-09-01 74229900  157.  155.  158.  158.           156.\n5 AAPL   2022-09-02 76957800  160.  155.  160.  156.           154.\n# ℹ 495 more rows\n```\n\n\n:::\n:::\n\n\n\nAs you can see, we included defaults for `start_date` and `end_date` that you can of course overwrite:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload_data(\"stock_prices\", symbols = c(\"AAPL\", \"MSFT\"),\n              start_date = \"2020-01-01\", end_date = \"2020-12-31\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 504 × 8\n  symbol date          volume  open   low  high close adjusted_close\n  <chr>  <date>         <dbl> <dbl> <dbl> <dbl> <dbl>          <dbl>\n1 AAPL   2020-01-02 135480400  74.1  73.8  75.2  75.1           72.9\n2 AAPL   2020-01-03 146322800  74.3  74.1  75.1  74.4           72.2\n3 AAPL   2020-01-06 118387200  73.4  73.2  75.0  74.9           72.7\n4 AAPL   2020-01-07 108872000  75.0  74.4  75.2  74.6           72.4\n5 AAPL   2020-01-08 132079200  74.3  74.3  76.1  75.8           73.6\n# ℹ 499 more rows\n```\n\n\n:::\n:::\n\n\n\nTo inspect details about the download approach, you can call the documentation via `?download_data_stock_prices`.\n\nTo get symbols, you have now two options: first, you can download symbols from the [Nasdaq Stock Screener](https://www.nasdaq.com/market-activity/stocks/screener) for the exchanges AMEX, NASDAQ, and NYSE. Analogously, you can find details using `?download_data_symbols`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload_data(\"symbols\", exchange = \"NASDAQ\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,972 × 6\n  symbol name                        country ipo_year industry sector\n  <chr>  <chr>                       <chr>   <chr>    <chr>    <chr> \n1 AACG   ATA Creativity Global Amer… China   \"2008\"   Other C… Real …\n2 AADI   Aadi Bioscience Inc. Commo… United… \"\"       Biotech… Healt…\n3 AAGR   African Agriculture Holdin… United… \"2021\"   Farming… Consu…\n4 AAGRW  African Agriculture Holdin… United… \"2021\"   Farming… Consu…\n5 AAL    American Airlines Group In… United… \"\"       Air Fre… Consu…\n# ℹ 3,967 more rows\n```\n\n\n:::\n:::\n\n\n\nSecond, you can  download index constituents from selected [iShares ETFs](https://www.ishares.com/us/products/etf-investments#/?productView=etf&pageNumber=1&sortColumn=totalNetAssets&sortDirection=desc&dataView=keyFacts) that physically replicate the corresponding index:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload_data(\"constituents\", index = \"DAX\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 40 × 5\n  symbol name                  location    exchange      currency\n  <chr>  <chr>                 <chr>       <chr>         <chr>   \n1 SAP.DE SAP                   Deutschland Xetra         EUR     \n2 SIE.DE SIEMENS N AG          Deutschland Xetra         EUR     \n3 ALV.DE ALLIANZ               Deutschland Xetra         EUR     \n4 DTE.DE DEUTSCHE TELEKOM N AG Deutschland Xetra         EUR     \n5 AIR.BE AIRBUS                Frankreich  Boerse Berlin EUR     \n# ℹ 35 more rows\n```\n\n\n:::\n:::\n\n\n\nThe documentation `?download_data_constituents` provides details. \n\n## Download macro data\n\nWe also added support for the [Federal Reserve Economic Databa (FRED)](https://fred.stlouisfed.org/), where you can easily download multiple series (see `?download_data_fred` for details):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload_data(\"fred\", series = c(\"GDP\", \"CPIAUCNS\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNo `start_date` or `end_date` provided. Returning the full data set.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,649 × 3\n  date       value series\n  <date>     <dbl> <chr> \n1 1947-01-01  243. GDP   \n2 1947-04-01  246. GDP   \n3 1947-07-01  250. GDP   \n4 1947-10-01  260. GDP   \n5 1948-01-01  266. GDP   \n# ℹ 1,644 more rows\n```\n\n\n:::\n:::\n\n\n\nOur approach is a simple wrapper around the FRED download data site. If you want to systematically download FRED data via API, please consider using `fredr` package.\n\nThe [macro predictors](https://www.tidy-finance.org/r/accessing-and-managing-financial-data.html#macroeconomic-predictors) by Ivo Welch and Amig Goyal now also come in different flavors: monthly, quarterly, and annual. For instance, the annual data can be fetched via:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload_data(\"macro_predictors_annual\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNo `start_date` or `end_date` provided. Returning the full data set.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 97 × 15\n  date       rp_div    dp    dy    ep      de    svar    bm   ntis\n  <date>      <dbl> <dbl> <dbl> <dbl>   <dbl>   <dbl> <dbl>  <dbl>\n1 1926-01-01  0.232 -2.97 -2.89 -2.39 -0.586  0.0165  0.441 0.0509\n2 1927-01-01  0.275 -3.13 -2.86 -2.77 -0.366  0.00942 0.375 0.0765\n3 1928-01-01 -0.163 -3.36 -3.03 -2.87 -0.485  0.0198  0.260 0.0631\n4 1929-01-01 -0.342 -3.10 -3.22 -2.59 -0.507  0.125   0.338 0.164 \n5 1930-01-01 -0.612 -2.75 -3.09 -2.76  0.0103 0.0666  0.555 0.114 \n# ℹ 92 more rows\n# ℹ 6 more variables: tbl <dbl>, lty <dbl>, ltr <dbl>, tms <dbl>,\n#   dfy <dbl>, infl <dbl>\n```\n\n\n:::\n:::\n\n\n\nSee `?download_data_macro_predictors` for details. \n\nFinally, we also added support to download the factors from [Open Source Asset Pricing (OSAP)](https://www.openassetpricing.com/) by Andrew Y. Chen and Tom Zimmermann:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload_data(\"osap\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNo `start_date` or `end_date` provided. Returning the full data set.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,164 × 213\n  date          am   aop abnormal_accruals accruals accruals_bm\n  <date>     <dbl> <dbl>             <dbl>    <dbl>       <dbl>\n1 1926-01-30    NA    NA                NA       NA          NA\n2 1926-02-27    NA    NA                NA       NA          NA\n3 1926-03-31    NA    NA                NA       NA          NA\n4 1926-04-30    NA    NA                NA       NA          NA\n5 1926-05-28    NA    NA                NA       NA          NA\n# ℹ 1,159 more rows\n# ℹ 207 more variables: activism1 <dbl>, activism2 <dbl>,\n#   ad_exp <dbl>, age_ipo <dbl>, analyst_revision <dbl>,\n#   analyst_value <dbl>, announcement_return <dbl>,\n#   asset_growth <dbl>, bm <dbl>, bmdec <dbl>, bpebm <dbl>,\n#   beta <dbl>, beta_fp <dbl>, beta_liquidity_ps <dbl>,\n#   beta_tail_risk <dbl>, bid_ask_spread <dbl>, …\n```\n\n\n:::\n:::\n\n\n\nYou can get more information by calling `?download_data_osap`.\n\n## List supported types and indexes\n\nTo get a list of supported data types, you can call:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_supported_types()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 318 × 3\n  type                  dataset_name                   domain  \n  <chr>                 <chr>                          <chr>   \n1 factors_q5_daily      q5_factors_daily_2022.csv      Global Q\n2 factors_q5_weekly     q5_factors_weekly_2022.csv     Global Q\n3 factors_q5_weekly_w2w q5_factors_weekly_w2w_2022.csv Global Q\n4 factors_q5_monthly    q5_factors_monthly_2022.csv    Global Q\n5 factors_q5_quarterly  q5_factors_quarterly_2022.csv  Global Q\n# ℹ 313 more rows\n```\n\n\n:::\n:::\n\n\n\nThe list of supported indexes for `download_data_constituents()` can be inspected via:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_supported_indexes()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 3\n  index                        url                               skip\n  <chr>                        <chr>                            <dbl>\n1 DAX                          https://www.ishares.com/de/priv…     2\n2 EURO STOXX 50                https://www.ishares.com/de/priv…     2\n3 Dow Jones Industrial Average https://www.ishares.com/de/priv…     2\n4 Russell 1000                 https://www.ishares.com/ch/prof…     9\n5 Russell 2000                 https://www.ishares.com/ch/prof…     9\n# ℹ 8 more rows\n```\n\n\n:::\n:::\n\n\n\n## Concluding remarks\n\nWe are curious to learn in which direction we should extend the package, so please consider opening an issue in the [package repository](https://github.com/tidy-finance/r-tidyfinance/issues). For instance, we could support more data sources, add more parameters to the `download_*` family of functions, or we could put more emphasis on the generality of portfolio assignment or other modeling functions. Moreover, if you discover a bug, we are very grateful if you raise them in the repository.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}