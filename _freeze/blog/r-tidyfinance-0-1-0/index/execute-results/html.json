{
  "hash": "05120960c131f4160ccd1eeb61f26400",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"tidyfinance 0.1.0\"\nauthor:\n  - name: Christoph Scheuch\n    url: https://christophscheuch.github.io/\n    affiliations:\n      - name: wikifolio Financial Technologies AG\n  - name: Stefan Voigt\n    url: https://www.voigtstefan.me/\n    affiliations:\n      - name: University of Copenhagen\n      - name: Danish Finance Institute\n  - name: Patrick Weiss\n    url: https://sites.google.com/view/patrick-weiss\n    affiliations:\n      - name: Reykjavik University\n      - name: WU Vienna University of Economics and Business\ndate: \"2023-04-07\"\ndescription: tidyfinance 0.1.0 is now on CRAN. Discover what this release includes. \nimage: thumbnail.png\nimage-alt: An image depicting a busy warehouse scene with a single cardboard box on a conveyor belt, labeled 'tidyfinance' and no other text or stickers. In the background, workers in safety vests are sorting and scanning other packages amidst shelves filled with various boxes and logistics equipment, under a well-lit, organized, and efficient atmosphere. Created with DALL-E 3.\ncategories: \n  - Data\n  - R\n--- \n\n\nWe are happy to annouce the initial release of the `tidyfinance` R package [on CRAN](https://cran.r-project.org/web/packages/tidyfinance/index.html). The package contains a set of helper functions for empirical research in financial economics, addressing a variety of topics covered in [Tidy Finance with R](../../r/index.qmd) (TFWR). We designed the package to provide easy shortcuts for the applications that we discuss in the book. If you want to inspect the details of the package or propose new features, feel free to visit the package repository on [Github](https://github.com/tidy-finance/r-tidyfinance).\n\nIn this blog post, we demonstrate the features of the initial release. We decided to focus on functions that allow you to download the data that we use in TFWR. \n\n## Install the package\n\nYou can install the released version of `tidyfinance` from CRAN via:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyfinance\")\n```\n:::\n\n\nYou can install the development version of tidyfinance from GitHub using the `pak` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pak(\"tidy-finance/r-tidyfinance\")\n```\n:::\n\n\n## Download data \n\nLet's start by loading the package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyfinance)\n```\n:::\n\n\nThe main function is `download_data(type, start_date, end_date)` with supported type:\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_supported_types()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 3\n  type                  dataset_name                   domain  \n  <chr>                 <chr>                          <chr>   \n1 factors_q5_daily      q5_factors_daily_2022.csv      Global Q\n2 factors_q5_weekly     q5_factors_weekly_2022.csv     Global Q\n3 factors_q5_weekly_w2w q5_factors_weekly_w2w_2022.csv Global Q\n4 factors_q5_monthly    q5_factors_monthly_2022.csv    Global Q\n5 factors_q5_quarterly  q5_factors_quarterly_2022.csv  Global Q\n# ℹ 15 more rows\n```\n\n\n:::\n:::\n\n\nSo, for instance, if you want to download monthly Fama-French Three-Factor data, you can call:\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload_data(\"factors_ff3_monthly\", \"2020-01-01\", \"2020-12-31\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 5\n  date       risk_free mkt_excess     smb     hml\n  <date>         <dbl>      <dbl>   <dbl>   <dbl>\n1 2020-01-01    0.0013    -0.0011 -0.0311 -0.0625\n2 2020-02-01    0.0012    -0.0813  0.0107 -0.0381\n3 2020-03-01    0.0013    -0.134  -0.0483 -0.139 \n4 2020-04-01    0          0.136   0.0245 -0.0133\n5 2020-05-01    0.0001     0.0558  0.0247 -0.0488\n# ℹ 7 more rows\n```\n\n\n:::\n:::\n\n\nUnder the hood, the function uses the `frenchdata` package (see its documentation [here](https://cran.r-project.org/web/packages/frenchdata/index.html)) and applies some cleaning steps, as in TFWR. If you haven't installed `frenchdata` yet, you'll get prompted to install it first before you can download this specific data type. \n\nYou can also access q-Factor data in this way, by calling:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload_data(\"factors_q5_daily\", \"2020-01-01\", \"2020-12-31\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 253 × 7\n  date       risk_free mkt_excess       me       ia      roe       eg\n  <date>         <dbl>      <dbl>    <dbl>    <dbl>    <dbl>    <dbl>\n1 2020-01-02  0.000055    0.00863 -0.0112  -0.00171  6.84e-4  3.41e-3\n2 2020-01-03  0.000055   -0.00673  0.00234 -0.00193 -1.55e-3  6.83e-4\n3 2020-01-06  0.000055    0.00360 -0.00360 -0.00409 -4.78e-3  6.11e-4\n4 2020-01-07  0.000055   -0.00192 -0.00139 -0.00322 -5.12e-3 -2.74e-3\n5 2020-01-08  0.000055    0.00467 -0.00108 -0.00121  4.56e-3  6.14e-3\n# ℹ 248 more rows\n```\n\n\n:::\n:::\n\n\nTo ensure that we can extend the functionality of the download functions for specific types, we also provide domain-specific download functions. The `download_data(\"factors_ff3_monthly\")` actually calls `download_data_factors(\"factors_ff3_monthly\")`, which in turn calls `download_data_factors_ff(\"factors_ff3_monthly\")`. Why did we decide to have these nested function approach?\n\nSuppose that the q-Factor data changes its URL path and our original function does not work anymore. In this case, you can replace the default `url` value in `download_data_factors_q(type, start_date, end_date, url)` to apply the usual cleaning steps. \n\nThis feature becomes more apparent for other data sources such as `wrds_crsp_monthly`. Note that you need to have valid WRDS credentials and need to set them correctly (check `?get_wrds_connection` and [WRDS, CRSP, and Compustat](../../r/wrds-crsp-and-compustat) in TFWR). If you want to download the standard monthly CRSP data, you can call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload_data(\"wrds_crsp_monthly\", \"2020-01-01\", \"2020-12-31\")\n```\n:::\n\n\nIf you want to add further columns, you can add them via `...` to `download_data_wrds_crsp()`, for instance:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload_data_wrds_crsp(\"wrds_crsp_monthly\", \"2020-01-01\", \"2020-12-31\", mthvol)\n```\n:::\n\n\nNote that the function downloads CRSP v2 as default, as we do in our book since February 2024 (see also this blog post for details TODO: INSERT LINK). If you want to download the old version of CRSP before the update, you can use the `version = v1` parameter in `download_data_wrds_crsp()` . \n\nAs another example, you can do the same for Compustat:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload_data_wrds_compustat(\"wrds_compustat_annual\", \"2000-01-01\", \"2020-12-31\", acoxar, amc, aldo)\n```\n:::\n\n\nCheck out the list of supported types and the corresponding download functions for more information on the respective customization options. We decided to provide limited functionality for the initial release on purpose and rather respond to community request than overengineer the package from the start.  \n\n## Browse content from TFWR\n\nWe include functions to check out content from TFWR in your browser. If you want to list all available R chapters, simply call the following function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_tidy_finance_chapters()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"setting-up-your-environment\"                \n [2] \"introduction-to-tidy-finance\"               \n [3] \"accessing-and-managing-financial-data\"      \n [4] \"wrds-crsp-and-compustat\"                    \n [5] \"trace-and-fisd\"                             \n [6] \"other-data-providers\"                       \n [7] \"beta-estimation\"                            \n [8] \"univariate-portfolio-sorts\"                 \n [9] \"size-sorts-and-p-hacking\"                   \n[10] \"value-and-bivariate-sorts\"                  \n[11] \"replicating-fama-and-french-factors\"        \n[12] \"fama-macbeth-regressions\"                   \n[13] \"fixed-effects-and-clustered-standard-errors\"\n[14] \"difference-in-differences\"                  \n[15] \"factor-selection-via-machine-learning\"      \n[16] \"option-pricing-via-machine-learning\"        \n[17] \"parametric-portfolio-policies\"              \n[18] \"constrained-optimization-and-backtesting\"   \n[19] \"wrds-dummy-data\"                            \n[20] \"cover-and-logo-design\"                      \n[21] \"clean-enhanced-trace-with-r\"                \n[22] \"proofs\"                                     \n[23] \"hex-sticker\"                                \n[24] \"changelog\"                                  \n```\n\n\n:::\n:::\n\n\nThe function returns a character vector containing the names of the chapters available in TFWR. If you want to look at a specific chapter, you can call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nopen_tidy_finance_website(\"beta-estimation\")\n```\n:::\n\n\nThis opens either the specific chapter you requested or the main index page in your default web browser. \n\n## Regression helpers\n\nWe discuss winsorization in TFWR, so we figured providing this function could be useful:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\nlibrary(dplyr)\n\nset.seed(123)\ndata <- tibble(x = rnorm(100)) |> \n  arrange(x)\n\ndata |> \n  mutate(x_winsorized = winsorize(x, 0.01))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100 × 2\n      x x_winsorized\n  <dbl>        <dbl>\n1 -2.31        -1.97\n2 -1.97        -1.97\n3 -1.69        -1.69\n4 -1.55        -1.55\n5 -1.27        -1.27\n# ℹ 95 more rows\n```\n\n\n:::\n:::\n\n\nIf you rather want to replace the bottom and top quantiles of your distribution with missing values, then you can use `trim()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> \n  mutate(x_trimmed = trim(x, 0.01))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100 × 2\n      x x_trimmed\n  <dbl>     <dbl>\n1 -2.31     NA   \n2 -1.97     -1.97\n3 -1.69     -1.69\n4 -1.55     -1.55\n5 -1.27     -1.27\n# ℹ 95 more rows\n```\n\n\n:::\n:::\n\n\nWe also discuss the importance of providing summary statistics of your data, so there is also a function for that:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_summary_statistics(data, x, detail = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 15\n  variable     n   mean    sd   min   q01   q05   q10    q25    q50\n  <chr>    <int>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>  <dbl>\n1 x          100 0.0904 0.913 -2.31 -1.97 -1.27 -1.07 -0.494 0.0618\n# ℹ 5 more variables: q75 <dbl>, q90 <dbl>, q95 <dbl>, q99 <dbl>,\n#   max <dbl>\n```\n\n\n:::\n:::\n\n\n## Experimental functions\n\nWe have two more experimental functions in the sense that it is unclear in which direction they might evolve. First you can assign portfolios based on a sorting variable using `assign_portfolio()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- tibble(\n  id = 1:100,\n  exchange = sample(c(\"NYSE\", \"NASDAQ\"), 100, replace = TRUE),\n  market_cap = runif(100, 1e6, 1e9)\n)\n\ndata |> \n  mutate(\n    portfolio = assign_portfolio(\n      pick(everything()), \"market_cap\", n_portfolios = 5, exchanges = c(\"NYSE\"))\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100 × 4\n     id exchange market_cap portfolio\n  <int> <chr>         <dbl>     <int>\n1     1 NASDAQ   784790691.         4\n2     2 NASDAQ    10420475.         1\n3     3 NASDAQ   779286817.         4\n4     4 NYSE     729661261.         4\n5     5 NASDAQ   630501721.         3\n# ℹ 95 more rows\n```\n\n\n:::\n:::\n\n\nSecond, you can estimate the coefficients of a linear model specified by one or more independent variable using `estimate_model()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- tibble(\n  ret_excess = rnorm(100),\n  mkt_excess = rnorm(100),\n  smb = rnorm(100),\n  hml = rnorm(100)\n)\n\nestimate_model(data, \"ret_excess ~ mkt_excess + smb + hml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  mkt_excess     smb    hml\n1    -0.0399 -0.0287 0.0207\n```\n\n\n:::\n:::\n\n\n## Concluding remarks\n\nWe are curious to learn in which direction we should extend the package, so please consider opening an issue in the [package repository](https://github.com/tidy-finance/r-tidyfinance/issues). For instance, we could support more data sources, add more parameters to the `download_*` family of functions, or we could put more emphasis on the generality of portfolio assignment or other modeling functions. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}