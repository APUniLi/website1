{
  "hash": "be1d43cb13a56bf14a7c91dbd1c6a570",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Fast Portfolio Sorts\"\nauthor:\n  - name: Christoph Scheuch\n    url: https://www.tidy-intelligence.com/\ndate: \"2024-06-08\"\ndescription: A benchmark of R approaches for efficient portfolio sorts\ncategories: \n  - R\n  - Portfolio Sorts\n  - data.table\nimage: thumbnail.png\nimage-alt: A winner's podium with three genderless robots celebrating, each holding a trophy. The robots have a sleek, modern design with neutral features. The podium is positioned in a modern office setting with bright colors, contemporary furniture, large windows letting in natural light, and vibrant decor. The first-place robot stands in the center, elevated above the second and third place robots on either side, all expressing joy. Created by DALL-E.\n---\n\n\nIn the world of finance and investment management, implementing standard tasks like portfolio sorts in R can be approached in various ways, including using base R, `dplyr`, or `data.table`. For researchers and data analysts, it's crucial that these implementations are both correct and efficient. Even though portfolio sorting is a relatively simple task, the need to sort portfolios in numerous ways due to the variety of sorting variables and methodological uncertainties can make computational efficiency critical. This blog post will benchmark the performance of different sorting methods in R, focusing on execution time and memory usage, to provide insights for data analysts and portfolio managers on choosing the most efficient approach.\n\nWe'll dive into the following sorting approaches:\n\n- Use the built-in `base` functions that ship with every R installation.\n- Leverage the popular `dplyr` package and workhorse of [Tidy Finance with R](../../r/index.qmd).\n- Explore the powerful `data.table` package using on-the-fly column creation.\n- Compare to the `data.table` variant with in-place mutations. \n- Combine the `dplyr` syntax with `data.table`'s performance through `dtplyr`.\n\nThroughout this blog post, I'll use the following packages. Notably, `bench` is used to create benchmarking results. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(dtplyr)\nlibrary(data.table)\nlibrary(bench)\nlibrary(purrr)\nlibrary(RSQLite)\nlibrary(ggplot2)\n```\n:::\n\n\n## Data preparation\n\nFirst, I start by loading the monthly CRSP data from our database (see [WRDS, CRSP, and Compustat](../../r/wrds-crsp-and-compustat.qmd) for details). The dataset has about 3 million rows and contains monthly returns between 1960 and 2023 for about 26,000 stocks. I also make sure that the data comes as a `tibble` for `dplyr`, a `data.frame` for `base`, two `data.table`s for the two `data.table` approaches, and a 'lazy' data table for `dtplyr` because I want to avoid any conversion issues in the portfolio assignments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_finance <- dbConnect(\n  SQLite(),\n  \"../../data/tidy_finance_r.sqlite\",\n  extended_types = TRUE\n)\n\ncrsp_monthly_dplyr <- tbl(tidy_finance, \"crsp_monthly\") |>\n  select(permno, month, ret_excess, mktcap_lag) |>\n  collect()\n\ncrsp_monthly_base <- as.data.frame(crsp_monthly_dplyr)\n\ncrsp_monthly_dt <- copy(as.data.table(crsp_monthly_dplyr))\n\ncrsp_monthly_dtip <- copy(as.data.table(crsp_monthly_dplyr))\n\ncrsp_monthly_dtplyr <- lazy_dt(copy(crsp_monthly_dt))\n```\n:::\n\n\nNote `data.table` in R uses reference semantics, which means that modifying one `data.table` object could potentially modify another if they share the same underlying data. Therefore, `copy()` ensures that `crsp_monthly_dt` is an independent copy of the data, preventing unintentional side effects from modifications in subsequent operations and ensuring a fair comparison. \n\n## Defining portfolio sorts\n\nAs a common denominator across approaches, I introduce a stripped down version of `assign_portfolio()` that can also be found in the [`tidyfinance`](https://cran.r-project.org/web/packages/tidyfinance/index.html) package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nassign_portfolio <- function(data, sorting_variable, n_portfolios) {\n  \n  breakpoints <- quantile(\n    data[[sorting_variable]], \n    probs = seq(0, 1, length.out = n_portfolios + 1), \n    na.rm = TRUE, names = FALSE\n  )\n\n  findInterval(\n    data[[sorting_variable]], breakpoints, all.inside = TRUE\n  )\n}\n```\n:::\n\n\nThe goal is to apply this function to the cross-section of stocks in each month and then compute average excess returns for each portfolio across all months.  \n\nIf we want to apply the function above to each month using only `base`, then we have to first split the `data.frame` into multiple parts and `lapply()` the function to each part. After we combined the parts again to one big data.frame, we can use `aggregate()` to compute the average excess returns. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort_base <- function() {\n  crsp_monthly_base$portfolio <- with(\n    crsp_monthly_base, \n    ave(mktcap_lag, month, FUN = function(x) assign_portfolio(data.frame(mktcap_lag = x), \"mktcap_lag\", n_portfolios = 10))\n  )\n  \n  mean_ret_excess <- with(\n    crsp_monthly_base, \n    tapply(ret_excess, portfolio, mean)\n  )\n\n  data.frame(\n    portfolio = names(mean_ret_excess), \n    ret = unlist(mean_ret_excess)\n  )\n}\nbench::system_time(sort_base())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nprocess    real \n  3.11s   3.08s \n```\n\n\n:::\n:::\n\n\nThis approach takes about 3 seconds per execution on my machine and is in fact more than 8-times slower than the other approaches! To create a more nuanced picture for the fast and arguably more interesting approaches, I'll drop the `base` approach going forward. \n\nIf we want to perform the same logic using `dplyr`, we can use the following approach. Note that I use `as.data.frame()` for all approaches to ensure that the output format is the same for all approaches - a necessary requirement for a meaningful benchmark (otherwise code would not be equivalent).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort_dplyr <- function() {\n  crsp_monthly_dplyr |> \n    group_by(month) |> \n    mutate(\n      portfolio = assign_portfolio(\n        pick(everything()), \"mktcap_lag\", n_portfolios = 10),\n      by = \"month\"\n    ) |> \n    group_by(portfolio) |> \n    summarize(ret = mean(ret_excess)) |> \n    as.data.frame()\n}\nsort_dplyr()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   portfolio     ret\n1          1 0.02270\n2          2 0.00512\n3          3 0.00482\n4          4 0.00515\n5          5 0.00548\n6          6 0.00608\n7          7 0.00637\n8          8 0.00680\n9          9 0.00647\n10        10 0.00579\n```\n\n\n:::\n:::\n\n\nThe equivalent approach in `data.table` looks as follows. Note that I deliberately don't use any pipe or intermediate assignments as to avoid any performance overhead that these might introduce. I also avoid using the in-place modifier `:=` because it would create a new permanent column in `crsp_monthly_dt`, which I don't need for the on-the-fly aggregation and it also doesn't happen in `dplyr`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort_dt <- function() {\n  as.data.frame(crsp_monthly_dt[\n    , .(portfolio = assign_portfolio(.SD, \"mktcap_lag\", n_portfolios = 10), month, ret_excess), by = .(month)][\n      , .(ret = mean(ret_excess)), keyby = .(portfolio)\n      ])\n}\nsort_dt()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   portfolio     ret\n1          1 0.02270\n2          2 0.00512\n3          3 0.00482\n4          4 0.00515\n5          5 0.00548\n6          6 0.00608\n7          7 0.00637\n8          8 0.00680\n9          9 0.00647\n10        10 0.00579\n```\n\n\n:::\n:::\n\n\nHowever, as the performance benefit of `data.table` may manifest itself through its in-place modification capabilties, I also introduce a second version of the `data.table` expression. Note that in this version `crsp_monthly_dtip` gets a permanent column `portfolio` that is overwritten in each iteration.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort_dtip <- function() {\n  as.data.frame(crsp_monthly_dtip[\n    , portfolio := assign_portfolio(.SD, \"mktcap_lag\", n_portfolios = 10), by = .(month)][\n      , .(ret = mean(ret_excess)), keyby = .(portfolio)\n      ])\n}\nsort_dtip()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   portfolio     ret\n1          1 0.02270\n2          2 0.00512\n3          3 0.00482\n4          4 0.00515\n5          5 0.00548\n6          6 0.00608\n7          7 0.00637\n8          8 0.00680\n9          9 0.00647\n10        10 0.00579\n```\n\n\n:::\n:::\n\n\nLastly, I add the `dtplyr` implementation that also takes a `data.table` as input and internally converts `dplyr` code to `data.table` syntax. Note that the final `as.data.frame()` call is used to access the results and ensure that the result format is consistent with the other approaches. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort_dtplyr <- function() {\n  crsp_monthly_dtplyr |> \n    group_by(month) |> \n    mutate(\n      portfolio = assign_portfolio(\n        pick(everything()), \"mktcap_lag\", n_portfolios = 10),\n      by = \"month\"\n    )  |> \n    group_by(portfolio) |> \n    summarize(ret = mean(ret_excess, na.rm = TRUE)) |> \n    as.data.frame()\n}\nsort_dtplyr()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   portfolio     ret\n1          1 0.02270\n2          2 0.00512\n3          3 0.00482\n4          4 0.00515\n5          5 0.00548\n6          6 0.00608\n7          7 0.00637\n8          8 0.00680\n9          9 0.00647\n10        10 0.00579\n```\n\n\n:::\n:::\n\n\nNow that we have verified that all code chunks create the same average excess returns per portfolio, we can proceed to the performance evaluation. \n\n## Benchmarking results\n\nThe `bench` package is a great utility for benchmarking and timing expressions in R. It provides functions that allow you to measure the execution time of  expressions or code chunks. This can be useful for comparing the performance of different approaches or implementations, or for identifying potential bottlenecks in your code. The following code evaluates each approach from above a 100 times and collects the results. \n\n\n::: {.cell}\n\n```{.r .cell-code}\niterations <- 100\n\nresults <- bench::mark(\n  sort_dplyr(), sort_dt(), sort_dtip(), sort_dtplyr(), \n  iterations = iterations\n)\n```\n:::\n\n\nThe following plot shows the distributions of execution times as violin plots. You can see that `dplyr` takes the lead and is followed closely by both `data.table` variants, while `dtplyr` takes the third place. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(results, type = \"violin\") +\n  labs(y = NULL, x = NULL, \n       title = \"Execution time of porfolio sorts using dplyr, data.table, and dtplyr\",\n       subtitle = \"'dt' refers to data.table without in-place modification and 'dtip' with in-place modification\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=2100}\n:::\n:::\n\n\nNote that all three methods are quite fast and take less than 1 second, given that the task is to assign 10 portfolios across up to 26,000 stocks for 755 months. In fact, `dplyr` yields the fastest execution times, followed by both `data.table` implementations and `dtplyr`. \n\nWhy is `data.table` slower than `dplyr`? It is generally believed that `data.table` is faster than `dplyr` for data manipulation tasks. The example above shows that it actually depends on the application. On the one hand, the data set might be 'too small' for the performance benefits of `data.table` to kick in. On the other hand, sorting the portfolios using the `assign_portfolio()` function might be better suited for the `dplyr` execution backend than the `data.table` backend.\n\nWhy is `dtplyr` slower than `data.table`? On the one hand, `dtplyr` translates `dplyr` operations into `data.table` syntax. This translation process introduces some overhead, as `dtplyr` needs to interpret the `dplyr` code and convert it into equivalent `data.table` operations. On the other hand, `dtplyr` does not modify in place by default, so it typcially makes a copy that would not be necessary if you were using `data.table` directly. \n\n## Concluding remarks\n\nThe key takeway is that neither of the libraries is strictly more efficient than the other. If you really search for performance among R libraries, you have to carefully choose a library for your specific application and think hard about optimizing the logic of your code to the chosen library. \n\nIf you have ideas how to optimize any of the approaches, please reach out to us! In particular, we'd love to optimize `base` sufficiently for it to be included in the benchmark tests.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}