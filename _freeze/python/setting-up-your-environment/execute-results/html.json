{
  "hash": "d043c0d5a4d8608273d99f7903c354d2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Setting Up Your Environment\nmetadata:\n  pagetitle: Setting Up Your Python Environment\n  description-meta: How to set up your development environment to program with Python.  \n---\n\nWe aim to lower the bar for starting empirical research in financial economics. We want to make using Python easy for you. However, given that Tidy Finance is a platform that supports multiple programming languages, we also consider the possibility that you are unfamiliar with Python. Maybe you are transitioning from R to Python, i.e., following the journey of Tidy Finance, which started in R. Hence, we provide you with a simple guide to get started with Python. If you have not used Python before, you will be able to use it after reading this chapter.\n\n## Python Environment\n\nA Python environment is a self-contained directory or folder containing a specific version of the Python installation with a set of packages and dependencies. In order to isolate and manage the specific dependencies of the Tidy Finance with Python project, a so-called *virtual environment* is a reliable way to ensure that it will work consistently and reliably on different systems and over time.\\index{Virtual environment}\n\nThere are many ways to install a Python version and environments on your system. We present two ways that we found most convenient to write this book and maintain our website: (i) Installation via Anaconda along with using Python in Spyder and (ii) installation via RStudio. \n\n## Installation via Anaconda\n\nFirst, we need to install Python itself via Anaconda. You can download the latest version of Anaconda from the official [Anaconda website.](https://www.anaconda.com/products/individual) After downloading the respective version for your operating system, follow the installation instructions.\\index{Anaconda}\n\nSecond, we now describe how to set up a Python virtual environment specific to Tidy Finance on your local system. This book uses Python version 3.10.11 to set up the environment for both Windows and Mac. As we write this book, it is not the latest version of Python. The reason for this is that we wanted (i) a stable code base and (ii) the content of the book to be usable for all kinds of users, especially for those who might rely on corporate version controls and are not able to install new Python distributions. \n\nFor the installation, we use the Anaconda Python distribution you downloaded in the step before.^[Note that you can also install a newer version of Python. We only require the environment set up in the previous step to use Python version 3.10.11. The neat aspect is Python's capability to accommodate version control in this respect.] Additionally, you need the packages listed in the provided [`requirements.txt`-file](https://github.com/tidy-finance/website/blob/main/requirements.txt) in a dedicated folder for the project. You can find the detailed list of packages in the [Colophon](colophon.qmd).\\index{Python version}\n\nWe recommend you start with the package installation right away. After you have prepared your system, you can open the Anaconda prompt and install your virtual environment with the following commands:\n\n1. `conda create -p C:\\Apps\\Anaconda3\\envs\\tidy_finance_environment python==3.10.11 (Confirm with y)`\n2. `conda activate C:\\Apps\\Anaconda3\\envs\\tidy_finance_environment`\n3. `pip install -r \"<Tidy-Finance-with-Python Folder>\\requirements.txt\"`\n\nAll other packages found with the command pip list are installed automatically as dependencies with the required packages in the file `requirements.txt`. Note that we make reference to two distinct folders. The first one, `C:\\Apps\\Anaconda3\\envs\\tidy_finance_environment` refers to the location of your Python environment used for Tidy Finance. Apart from that, you should store your data, program codes, and scripts in another location: Your Tidy Finance working folder.\n\nNow, you are basically ready to go. However, you will now need a Python integrated development environment (IDE) to make your coding experience pleasant.\n\n## Python IDE\n\nIf you are new to coding, you will not have an IDE for Python. We recommend using Spyder if you plan to code only in Python as it comes with Anaconda. If you don't use Anaconda, you can download the software for your operating system from the [official website.](https://www.spyder-ide.org/) Then, follow the installation instructions. To add the previously created virtual environment to Spyder, Go to Tools → Preferences → Python Interpreter → \"Use the following interpreter\" and add `C:\\Apps\\Anaconda3\\envs\\tidy_finance_environment\\python.exe`.\\index{Spyder}\n\nAnother increasingly popular code editor for data analysis is Visual Studio Code (VS Code), as it supports a variety of programming languages, including Python and R. We refer to [this tutorial](https://code.visualstudio.com/docs/python/python-tutorial) if you want to get started with VS Code. There are many more ways to set up a Python IDE, so we refer to [this page](https://wiki.python.org/moin/IntegratedDevelopmentEnvironments) in the Python wiki for more inspiration.\\index{VS Code}\n\nIf you also plan to try R, you should get a multipurpose tool: RStudio. You can get your RStudio version from [Posit](https://posit.co/download/rstudio-desktop/) (i.e., the company that created RStudio, which was previously called RStudio itself). When you follow the instructions, you will see that Posit asks you to install R; you need to do so to make RStudio feasible for Python. Then, select the virtual environment in RStudio. Alternatively, you can also start with the installation guide starting from RStudio, which we present below.\\index{RStudio}\n\n## Installation via RStudio\n\nYou can also install Python and set up your environment directly from RStudio. This approach has the big advantage that you can switch between R and Python code smoothly. We believe that being able to switch between different programming languages is a tremendously valuable skill, so we set up a repository containing all the files that you need to achieve this goal: [Tidy Finance Environment.](https://github.com/tidy-finance/environment) To set up this environment locally, follow these steps:\n\n1. Install [R](https://cran.r-project.org/) and [RStudio.](https://posit.co/download/rstudio-desktop/)\n1. Clone the [Tidy Finance Environment](https://github.com/tidy-finance/environment) repository directly in RStudio by clicking on `File/New Project/` and selecting `Version Control`. Then, click `Git` and provide the repository address [https://github.com/tidy-finance/environment](https://github.com/tidy-finance/environment). RStudio will then automatically open the project in the new environment. \n1. Install the `reticulate` R package: `install.packages(\"reticulate\")`.\n1. Use `reticulate` to install Python: `reticulate::install_python(version = \"3.10.11\", force = TRUE)`.\n1. Tell `renv` to use Python: `renv::use_python(\"PATH\")`.\n    a. `\"PATH\"` on Mac: `\"~/.pyenv/versions/3.10.11/bin/python\"`.\n    b. `\"PATH\"` on Windows: `\"C:/Users/<User>/AppData/Local/r-reticulate/ r-reticulate/pyenv/pyenv-win/versions/3.10.11/python.exe\"` where `<User>` is your username.\n1. Tell `renv` to install all required packages: `renv::restore()`.\n\nNow you are ready to execute all code that you can find in this book or its sibling *[Tidy Finance with R.](https://www.tidy-finance.org/r/index.html)* \n\n## Creating Environment Variables\n\nIf you plan to share your own code with collaborators or the public, you may encounter the situation that your projects require sensitive information, such as login credentials, that you don't want to publish. Environment variables are widely used in software development projects because they provide a flexible and secure way to configure applications and store secrets. In later chapters, we use such environment variables to store private login data for a remote database. \n\nYou can use `.env`-files to store environment variables. Upon startup, Python projects often use libraries like `python-dotenv` to load these environment variables from a `.env`-file. `.env`-files can be placed at the project level and are not meant to be committed to version control, ensuring that sensitive information remains private.\n\nFirst, you need to install the `python-dotenv` library if you haven't already:\n\n::: {#b90017ed .cell execution_count=1}\n``` {.python .cell-code}\npip install python-dotenv\n```\n:::\n\n\nThen, create a `.env`-file in your project directory. You can add variables to this file. For the purpose of this book, we create and save the following variables (where `user` and `password` are our private login credentials):\n\n```\nWRDS_USER=user\nWRDS_PASSWORD=password\n```\n\nTo access these environment variables in your Python code, load the environment variables at the start of your Python script using `python-dotenv`:\n\n::: {#51f2fc8f .cell execution_count=2}\n``` {.python .cell-code}\nfrom dotenv import load_dotenv\nimport os\nload_dotenv()\n\nwrds_user = os.getenv(\"WRDS_USER\")\nwrds_password = os.getenv(\"WRDS_PASSWORD\")\n```\n:::\n\n\nNote that you can also store other login credentials, API keys, or file paths in the same environment file.\n\nIf you use version control, make sure that the `.env`-file is included in your `.gitignore ` to avoid committing sensitive information to your repository.\n\n",
    "supporting": [
      "setting-up-your-environment_files"
    ],
    "filters": [],
    "includes": {}
  }
}