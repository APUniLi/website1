{
  "hash": "9b69a8aaafb3e58b6713a8bfc2c67f78",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Tidy Finance with Python\"\nnumber-sections: false\neditor: \n  markdown: \n    wrap: sentence\nimage: ../images/cover.png\nmetadata:\n  pagetitle: Tidy Finance with Python\n  description-meta: An opinionated approach to empirical research in financial economics with open-source Python code. \n---\n\n# Preface\n\n::: {.callout-note}\nYou are reading the work-in-progress edition of **Tidy Finance with Python**. Code chunks and text might change over the next couple of months. We are always looking for feedback via [contact\\@tidy-finance.org](mailto:contact@tidy-finance.org). Meanwhile, you can find the complete R version [here](../r/index.qmd).\n:::\n\n## Why Does This Book Exist?\n\nOur book [Tidy Finance with R](../r/index.qmd) received great feedback from students and teachers alike. However, one of the most common feedback we received was that many interested coders are constrained and have to use Python in their institutions. We really love R for data analysis tasks, but we acknowledge the flexibility and popularity of Python. Hence, we decided to increase our team of authors with a Python expert and extend our original work following the same tidy principles. \n\n## Who Should Read This Book?\n\nWe write this book for three audiences:\n\n- Students who want to acquire the basic tools required to conduct financial research ranging from undergrad to graduate level. The bookâ€™s structure is simple enough such that the material is sufficient for self-study purposes.\n- Instructors who look for materials to teach courses in empirical finance or financial economics. We provide plenty of examples and focus on intuitive explanations that can easily be adjusted or expanded. At the end of each chapter, we provide exercises that we hope inspire students to dig deeper.\n- Data analysts or statisticians who work on issues dealing with financial data and who need practical tools to succeed.\n\n## What Will You Learn?\n\nThe book is divided into five parts:\n\n- The first part helps you to set-up your development environment and introduces you to important concepts around which our approach to Tidy Finance revolves.\n- The second part provides tools to organize your data and prepare the most common data sets used in financial research. Although many important data are behind paywalls, we start by describing different open-source data and how to download them. We then move on to prepare two of the most popular datasets in financial research: CRSP and Compustat. We reuse the data from these chapters in all subsequent chapters. \n- The third part deals with key concepts of empirical asset pricing, such as beta estimation, portfolio sorts, performance analysis, and asset pricing regressions.\n- In the fourth part, we apply linear models to panel data and machine learning methods to problems in factor selection and option pricing.\n- The last part provides approaches for parametric, constrained portfolio optimization, and backtesting procedures.\nEach chapter is self-contained and can be read individually. Yet the data chapters provide an important background necessary for data management in all other chapters.\n\n## What Won't You Learn?\n\nThis book is about empirical work. While we assume only basic knowledge of statistics and econometrics, we do not provide detailed treatments of the underlying theoretical models or methods applied in this book. Instead, you find references to the seminal academic work in journal articles or textbooks for more detailed treatments. We believe that our comparative advantage is to provide a thorough implementation of typical approaches such as portfolio sorts, backtesting procedures, regressions, machine learning methods, or other related topics in empirical finance. We enrich our implementations by discussing the nitty-gritty choices you face while conducting empirical analyses. We hence refrain from deriving theoretical models or extensively discussing the statistical properties of well-established tools.\n\n## Why Python?\n\nPython [@python] is an open-source, general-purpose, high-level programming language widely used across various industries. \nPython is widely used for data science according to the Python Developers Survey [@pythonsurvey], particularly for financial applications. \nSimilarly to R, the Python community values readable and straightforward code. \nThus, Python is an excellent choice for first-time programmers. \nAt the same time, experienced researchers in financial economics and analysts benefit from the wide range of possibilities to express complex ideas with concise and understandable code. \nSome of the highlights of Python include\n\n- Open-source: Python uses a source license, making it usable and distributable for academic and commercial use.\n- Flexibility: Python's extensive ecosystem of standard libraries and community-contributed modules allows for all kinds of unique projects. It seamlessly integrates various data sources and APIs, facilitating efficient data retrieval and processing.\n- Versatility: Python is a cross-platform, multipurpose language that can be used to write fast low-level executable code, large applications, and even Graphical User Interfaces (GUI).\n- Speed: Python is fast. In addition, parallelization is straightforward to implement to tackle big data problems without hassle.\n- Robustness: Python provides robust tools for data manipulation, analysis, and visualization, crucial components in finance research. \n- Importance: The language's active community support and continuous development ensure access to cutting-edge technologies and methodologies. Learning Python enhances one's ability to conduct sophisticated financial analysis, making it a valuable skill for professionals across diverse fields.\n\nThe so-called Zen of Python by Tim Peters summarizes its major syntax guidelines for structured, tidy, and human-readable code. It is easily accessible in every Python environment through:\n\n::: {#76cbca74 .cell execution_count=1}\n``` {.python .cell-code}\nimport this\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n```\n:::\n:::\n\n\nPython comes in many flavors, and endless external packages extend the possibilities for conducting financial research. \nAny code we provide echoes some arguably subjective decisions we have taken to comply with our idea of what Tidy Finance comprises: Code should not simply yield the correct output but should be easy to read. \nWe would like to advocate using chained commands via pipes. \nFurther, the entire book rests on tidy data, which we handle with a small set of powerful packages proven effective: 'pandas' and 'numpy'.\nRegarding visualization (which we deem highly relevant to provide a fundamentally human-centered experience), we follow the Grammars of Graphics' philosophical framework, which has been carefully implemented using 'plotnine'. \nArguably, neither chaining commands nor using 'plotnine' can be considered mainstream within the Python ecosystem for financial research (yet). \nWe believe in the value of the workflows we teach and apply daily and, therefore, that adopting such coding principles will dramatically increase in the near future. For more information on why Python is great, we refer to Chapter 1 in @Hilpisch2018.\n\n## Why Tidy?\n\nAs you start working with data, you quickly realize that you spend a lot of time reading, cleaning, and transforming your data. In fact, it is often said that more than 80% of data analysis is spent on preparing data.\nBy *tidying data*, we want to structure data sets to facilitate further analyses.\nAs @Wickham2014 puts it:\n\n> \\[T\\]idy datasets are all alike, but every messy dataset is messy in its own way.\n> Tidy datasets provide a standardized way to link the structure of a dataset (its physical layout) with its semantics (its meaning).\n\nIn its essence, tidy data follows these three principles:\n\n1.  Every column is a variable.\n2.  Every row is an observation.\n3.  Every cell is a single value.\n\nThroughout this book, we try to follow these principles as best as possible.\nIf you want to learn more about tidy data principles in an informal manner, we refer you to [this vignette](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html) as part of @tidyr.\n\nIn addition to the data layer, there are also tidy coding principles outlined in [the tidy tools manifesto](https://tidyverse.tidyverse.org/articles/manifesto.html) that we try to follow:\n\n1.  Reuse existing data structures.\n2.  Compose simple functions with the pipe.\n3.  Embrace functional programming.\n4.  Design for humans.\n\n## About the Authors\n\n- [Christoph Frey](https://sites.google.com/site/christophfrey/) is a Quantitative Researcher at [Pinechip Capital GmbH](https://www.pinechip.capital/landingtile/index.html) and Research Fellow at the [Centre for Financial Econometrics, Asset Markets and Macroeconomic Policy](https://www.lancaster.ac.uk/lums/research/areas-of-expertise/centre-for-financial-econometrics-asset-markets-and-macroeconomic-policy/) at Lancaster University. Prior, he headed the quantitative research for systematic multi-asset strategies at [Berenberg Bank](https://www.berenberg.de/) and also worked as an Assistant Professor at the [Erasmus Universiteit Rotterdam](https://www.eur.nl/). Christoph published research on Bayesian Econometrics and specializes in financial econometrics and portfolio optimization problems.\n- [Christoph Scheuch](https://christophscheuch.github.io/) is the Head of Artificial Intelligence at the social trading platform [wikifolio.com.](https://www.wikifolio.com/) He is responsible for researching, designing, and prototyping of cutting-edge AI-driven products using R and Python. Before his focus on AI, he was responsible for product management and business intelligence and an external lecturer at the [Vienna University of Economics and Business.](https://www.wu.ac.at/en/), where he taught finance students how to manage empirical projects.\n- [Stefan Voigt](https://voigtstefan.me/) is an Assistant Professor of Finance at the [Department of Economics at the University in Copenhagen](https://www.economics.ku.dk/) and a research fellow at the [Danish Finance Institute.](https://danishfinanceinstitute.dk/) His research focuses on blockchain technology, high-frequency trading, and financial econometrics. Stefan's research has been published in the leading finance and econometrics journals. He received the Danish Finance Institute Teaching Award 2022 for his courses for students and practitioners on empirical finance based on this book.\n- [Patrick Weiss](https://sites.google.com/view/patrick-weiss) is an Assistant Professor of Finance at [Reykjavik University](https://en.ru.is) and an external lecturer at the [Vienna University of Economics and Business.](https://www.wu.ac.at/en/) His research activity centers around the intersection of empirical asset pricing and corporate finance. Patrick is especially passionate about empirical asset pricing and has published research in leading journals in financial economics.\n\n## License\n\nThis book is licensed to you under [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/).\nThe code samples in this book are licensed under [Creative Commons CC0 1.0 Universal (CC0 1.0), i.e., public domain](https://creativecommons.org/publicdomain/zero/1.0/).\nYou can cite this work-in-progress version of the python project as follows:\n\n> Frey, C., Scheuch, C., Voigt, S., & Weiss, P. (2023).\n> Tidy Finance with Python.\n> <https://www.tidy-finance.org>\n\n``` bibtex\n@book{Frey2023,\n  title = {Tidy Finance with Python},\n  author = {Frey, Christoph and Scheuch, Christoph and Voigt, Stefan and Weiss, Patrick},\n  year = {2023},\n  edition = {work-in-progress},\n  url = {https://tidy-finance.org}\n}\n```\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}