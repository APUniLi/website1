{
  "hash": "d554cb2c272d28d919de6fb0fae3ae48",
  "result": {
    "markdown": "---\ntitle: Size Sorts and p-Hacking\n---\n\n\n\n::: {.callout-note}\nYou are reading the work-in-progress edition of **Tidy Finance with Python**. Code chunks and text might change over the next couple of months. We are always looking for feedback via [contact\\@tidy-finance.org](mailto:contact@tidy-finance.org). Meanwhile, you can find the complete R version [here](../r/index.qmd).\n:::\n\nIn this chapter, we continue with portfolio sorts in a univariate setting. Yet, we consider firm size as a sorting variable, which gives rise to a well-known return factor: the size premium. The size premium arises from buying small stocks and selling large stocks. Prominently, @Fama1993 include it as a factor in their three-factor model. Apart from that, asset managers commonly include size as a key firm characteristic when making investment decisions.\n\nWe also introduce new choices in the formation of portfolios. In particular, we discuss listing exchanges, industries, weighting regimes, and periods. These choices matter for the portfolio returns and result in different size premiums [see @Hasler2021, @Soebhag2022, and @Walter2022 for more insights into decision nodes and their effect on premiums]. Exploiting these ideas to generate favorable results is called p-hacking.\nThere is arguably a thin line between p-hacking and conducting robustness tests. Our purpose here is to illustrate the substantial variation that can arise along the evidence-generating process.\n\nThe chapter relies on the following set of packages:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport sqlite3\n\nfrom plotnine import *\nfrom mizani.formatters import percent_format\n\nimport itertools\nfrom multiprocessing import Pool, cpu_count\n```\n:::\n\n\n## Data Preparation\n\nFirst, we retrieve the relevant data from our `SQLite`-database introduced in Chapters 2-4. Firm size is defined as market equity in most asset pricing applications that we retrieve from CRSP. We further use the Fama-French factor returns for performance evaluation.\\index{Data!CRSP}\\index{Data!Fama-French factors}\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ntidy_finance = sqlite3.connect(\"data/tidy_finance.sqlite\")\n\ncrsp_monthly = (pd.read_sql_query(\n    sql=\"SELECT * FROM crsp_monthly\", \n    con=tidy_finance, \n    parse_dates={\"month\": {\"unit\":\"D\", \"origin\":\"unix\"}}\n  )\n  .dropna()\n)\n\nfactors_ff_monthly = (pd.read_sql_query(\n    sql=\"SELECT * FROM factors_ff_monthly\", \n    con=tidy_finance, \n    parse_dates={\"month\": {\"unit\":\"D\", \"origin\":\"unix\"}}\n  )\n  .dropna()\n)\n```\n:::\n\n\n## Size Distribution\n\nBefore we build our size portfolios, we investigate the distribution of the variable *firm size*.\\index{Firm size} Visualizing the data is a valuable starting point to understand the input to the analysis. Figure 8.1 shows the fraction of total market capitalization concentrated in the largest firm. To produce this graph, we create monthly indicators that track whether a stock belongs to the largest x percent of the firms. \nThen, we aggregate the firms within each bucket and compute the buckets' share of total market capitalization.\\index{Market capitalization}\n\n@fig-801 shows that the largest 1 percent of firms cover up to 50 percent of the total market capitalization, and holding just the 25 percent largest firms in the CRSP universe essentially replicates the market portfolio. The distribution of firm size thus implies that the largest firms of the market dominate many small firms whenever we use value-weighted benchmarks.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nmarket_cap_concentration = (crsp_monthly\n  .groupby(\"month\", group_keys = False)\n  .apply(lambda x: x.assign(top01=(x[\"mktcap\"] >= np.quantile(x[\"mktcap\"], 0.99)),\n                            top05=(x[\"mktcap\"] >= np.quantile(x[\"mktcap\"], 0.95)),\n                            top10=(x[\"mktcap\"] >= np.quantile(x[\"mktcap\"], 0.90)),\n                            top25=(x[\"mktcap\"] >= np.quantile(x[\"mktcap\"], 0.75))))\n  .reset_index(drop=True)\n  .groupby(\"month\")\n  .apply(lambda x: pd.Series({\"Largest 1% of stocks\": (x[\"mktcap\"][x[\"top01\"]].sum()) / x[\"mktcap\"].sum(),\n                              \"Largest 5% of stocks\": (x[\"mktcap\"][x[\"top05\"]].sum()) / x[\"mktcap\"].sum(),\n                              \"Largest 10% of stocks\": (x[\"mktcap\"][x[\"top10\"]].sum()) / x[\"mktcap\"].sum(),\n                              \"Largest 25% of stocks\": (x[\"mktcap\"][x[\"top25\"]].sum()) / x[\"mktcap\"].sum() }))\n  .reset_index()\n  .melt(id_vars=\"month\", \n        var_name=\"name\", \n        value_name=\"value\")\n)\n\nplot_market_cap_concentration = (ggplot(market_cap_concentration, \n    aes(x=\"month\", y=\"value\", color=\"name\", linetype=\"name\"))\n  + geom_line()\n  + scale_y_continuous(labels=percent_format())\n  + scale_x_date(name=\"\", date_labels=\"%Y\")\n  + labs(x=\"\", y=\"\", color=\"\", linetype=\"\", \n         title=\"Percentage of total market capitalization in largest stocks\")\n  + theme(subplots_adjust={\"bottom\": 0.12}, legend_position=(.5, 0), \n          legend_direction=\"horizontal\", legend_title=element_blank())\n)\nplot_market_cap_concentration.draw()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\christoph.scheuch\\.conda\\envs\\tidy-finance\\lib\\site-packages\\plotnine\\themes\\themeable.py:1902: FutureWarning: You no longer need to use subplots_adjust to make space for the legend or text around the panels. This paramater will be removed in a future version. You can still use 'plot_margin' 'panel_spacing' for your other spacing needs.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n![We report the aggregate market capitalization of all stocks that belong to the 1, 5, 10, and 25 percent quantile of the largest firms in the monthly cross-section relative to the market capitalization of all stocks during the month.](size-sorts-and-p-hacking_files/figure-html/fig-801-output-2.png){#fig-801 fig-alt='Title: Percentage of total market capitalization in largest stocks. The figure shows a line chart with four different lines that are relatively stable during the entire CRSP sample period. The largest 1 percent of all stocks on average comprise around 40 percent of the entire market capitalization. For the largest 25 percent, the share is around 90 percent.'}\n:::\n:::\n\n\nNext, firm sizes also differ across listing exchanges. Stocks' primary listings were important in the past and are potentially still relevant today. @fig-802 shows that the New York Stock Exchange (NYSE) was and still is the largest listing exchange in terms of market capitalization. More recently, NASDAQ has gained relevance as a listing exchange. Do you know what the small peak in NASDAQ's market cap around the year 2000 was?\\index{NYSE}\\index{AMEX}\\index{NASDAQ}\\index{Graph!Area graph}\n\n::: {.cell fig.alt='Title: Share of total market capitalization per listing exchange. The figure shows stacked area plots with a steady decline in the market capitalization of NYSE listed stocks since 1970. As of 2021, NYSE-listed stocks comprise around 50 percent of the entire CRSP market capitalization. The remainder is essentially listed on NASDAQ. Other exchanges are negligible.' execution_count=5}\n``` {.python .cell-code}\nmarket_cap_share = (crsp_monthly\n  .groupby([\"month\", \"exchange\"])\n  .apply(lambda x: pd.DataFrame({\"mktcap\": x[\"mktcap\"].sum()}, index=[0]))\n  .reset_index(drop=False)\n  .assign(\n    total_market_cap=lambda x: x.groupby(\"month\")[\"mktcap\"].transform(\"sum\"),\n    share=lambda x: x[\"mktcap\"] / x[\"total_market_cap\"]\n  )\n)\n\nplot_market_cap_share = (ggplot(\n  market_cap_share, aes(x=\"month\", y=\"share\", fill=\"exchange\", color=\"exchange\")) \n  + geom_area(position=\"stack\", stat=\"identity\", alpha=0.5) \n  + geom_line(position=\"stack\") \n  + scale_y_continuous(labels=percent_format())\n  + scale_x_date(name=\"\", date_labels=\"%Y\")\n  + labs(x=\"\", y=\"\", fill=\"\", color=\"\",\n         title=\"Share of total market capitalization per listing exchange\")\n  + theme(subplots_adjust={\"bottom\": 0.12}, legend_position=(.5, 0), \n          legend_direction=\"horizontal\", legend_title=element_blank())\n)\nplot_market_cap_share.draw()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\christoph.scheuch\\.conda\\envs\\tidy-finance\\lib\\site-packages\\plotnine\\themes\\themeable.py:1902: FutureWarning: You no longer need to use subplots_adjust to make space for the legend or text around the panels. This paramater will be removed in a future version. You can still use 'plot_margin' 'panel_spacing' for your other spacing needs.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n![Years are on the horizontal axis and the corresponding share of total market capitalization per listing exchange on the vertical axis.](size-sorts-and-p-hacking_files/figure-html/fig-802-output-2.png){#fig-802}\n:::\n:::\n\n\nFinally, we consider the distribution of firm size across listing exchanges and create summary statistics. The function `describe()` does not include all statistics we are interested in, which is why we create the function `create_summary()` that adds the standard deviation and the number of observations. Then, we apply it to the most current month of our CRSP data on each listing exchange. We also add a row with `add_row()` with the overall summary statistics.\\index{Summary statistics}\n\nThe resulting table shows that firms listed on NYSE in December 2021 are significantly larger on average than firms listed on the other exchanges. Moreover, NASDAQ lists the largest number of firms. This discrepancy between firm sizes across listing exchanges motivated researchers to form breakpoints exclusively on the NYSE sample and apply those breakpoints to all stocks. In the following, we use this distinction to update our portfolio sort procedure.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndef get_summary_statistics(data, variable, filter_variable, percentiles):\n   summary_df = (data\n                 .get([filter_variable, variable])\n                 .groupby(filter_variable)\n                 .describe(percentiles=percentiles)\n                 ) \n   summary_df.columns = summary_df.columns.droplevel(0)\n   summary_overall_df = (data\n                         .get(variable)\n                         .describe(percentiles=percentiles)\n                         ) \n   summary_df.loc[\"Overall\",:] = summary_overall_df\n   return summary_df\n\nget_summary_statistics(\n  crsp_monthly[crsp_monthly[\"month\"] == crsp_monthly[\"month\"].max()],\n   \"mktcap\",\n   \"exchange\",\n   [0.05, 0.5, 0.95]\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>5%</th>\n      <th>50%</th>\n      <th>95%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>exchange</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>AMEX</th>\n      <td>144.0</td>\n      <td>417.493685</td>\n      <td>2188.003634</td>\n      <td>7.565570</td>\n      <td>12.468110</td>\n      <td>76.662897</td>\n      <td>1220.035556</td>\n      <td>2.571889e+04</td>\n    </tr>\n    <tr>\n      <th>NASDAQ</th>\n      <td>2751.0</td>\n      <td>8390.963149</td>\n      <td>88820.083400</td>\n      <td>7.005530</td>\n      <td>29.298895</td>\n      <td>431.973496</td>\n      <td>18783.135368</td>\n      <td>2.902368e+06</td>\n    </tr>\n    <tr>\n      <th>NYSE</th>\n      <td>1369.0</td>\n      <td>17939.275120</td>\n      <td>48521.280506</td>\n      <td>23.913000</td>\n      <td>203.815939</td>\n      <td>3456.685274</td>\n      <td>80805.912673</td>\n      <td>4.729411e+05</td>\n    </tr>\n    <tr>\n      <th>Other</th>\n      <td>1.0</td>\n      <td>13906.246549</td>\n      <td>NaN</td>\n      <td>13906.246549</td>\n      <td>13906.246549</td>\n      <td>13906.246549</td>\n      <td>13906.246549</td>\n      <td>1.390625e+04</td>\n    </tr>\n    <tr>\n      <th>Overall</th>\n      <td>4265.0</td>\n      <td>11187.909167</td>\n      <td>76596.194034</td>\n      <td>7.005530</td>\n      <td>34.353498</td>\n      <td>802.433816</td>\n      <td>40692.376048</td>\n      <td>2.902368e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Univariate Size Portfolios with Flexible Breakpoints\n\nIn Chapter 7, we construct portfolios with a varying number of breakpoints and different sorting variables. Here, we extend the framework such that we compute breakpoints on a subset of the data, for instance, based on selected listing exchanges. In published asset pricing articles, many scholars compute sorting breakpoints only on NYSE-listed stocks. These NYSE-specific breakpoints are then applied to the entire universe of stocks.\\index{Portfolio sorts!Univariate}\\index{Breakpoints} \n\nTo replicate the NYSE-centered sorting procedure, we introduce `exchanges` as an argument in our `assign_portfolio()` function from [Univariate Portfolio Sorts](univariate-portfolio-sorts.qmd). The exchange-specific argument then enters in the filter `data[\"exchanges\"].isin(exchanges)`. For example, if `exchanges = 'NYSE'` is specified, only stocks listed on NYSE are used to compute the breakpoints. Alternatively, you could specify `exchanges = [\"NYSE\", \"NASDAQ\", \"AMEX\"]`, which keeps all stocks listed on either of these exchanges. \n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndef assign_portfolio(data, exchanges, sorting_variable, n_portfolios):\n    data_filtered = data[data[\"exchange\"].isin(exchanges)]\n    breakpoints = np.quantile(data_filtered[sorting_variable].dropna(), \n                              np.linspace(0, 1, n_portfolios + 1), \n                              method = \"linear\")\n    assigned_portfolios = pd.cut(data_filtered[sorting_variable],\n                                 bins=breakpoints,\n                                 labels=range(1, breakpoints.size),\n                                 include_lowest=True)\n    return assigned_portfolios\n```\n:::\n\n\n## Weighting Schemes for Portfolios\n\nApart from computing breakpoints on different samples, researchers often use different portfolio weighting schemes. So far, we weighted each portfolio constituent by its relative market equity of the previous period. This protocol is called *value-weighting*. The alternative protocol is *equal-weighting*, which assigns each stock's return the same weight, i.e., a simple average of the constituents' returns. Notice that equal-weighting is difficult in practice as the portfolio manager needs to rebalance the portfolio monthly while value-weighting is a truly passive investment.\\index{Weighting!Value}\\index{Weighting!Equal}\n\nWe implement the two weighting schemes in the function `compute_portfolio_returns()` that takes a logical argument to weight the returns by firm value. The statement `if_else(value_weighted, weighted.mean(ret_excess, mktcap_lag), mean(ret_excess))` generates value-weighted returns if `value_weighted = True`. Additionally, the long-short portfolio is long in the smallest firms and short in the largest firms, consistent with research showing that small firms outperform their larger counterparts. Apart from these two changes, the function is similar to the procedure in Chapter 7.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndef compute_portfolio_returns(n_portfolios=10, \n                              exchanges=[\"NYSE\", \"NASDAQ\", \"AMEX\"],\n                              value_weighted=True, \n                              data=crsp_monthly):\n    \n    def calculate_returns(data, value_weighted):\n        if value_weighted:\n            return np.average(data[\"ret_excess\"], weights=data[\"mktcap_lag\"])\n        else:\n            return data[\"ret_excess\"].mean()\n    \n    returns = (data\n      .groupby(\"month\")\n      .apply(lambda x: x.assign(portfolio = assign_portfolio(x, exchanges, \"mktcap_lag\", n_portfolios)))\n      .reset_index(drop=True)\n      .groupby([\"portfolio\", \"month\"])\n      .apply(lambda x: x.assign(ret = calculate_returns(x, value_weighted)))\n      .reset_index(drop=True)\n      .groupby(\"month\")\n      .apply(lambda x: x.assign(size_premium = x.loc[x[\"portfolio\"] == x[\"portfolio\"].min(), \"ret\"].mean() - x.loc[x[\"portfolio\"] == x[\"portfolio\"].max(), \"ret\"].mean()))\n      .reset_index(drop=True)\n      .aggregate({\"size_premium\": \"mean\"})\n    )\n    return returns\n```\n:::\n\n\nTo see how the function `compute_portfolio_returns()` works, we consider a simple median breakpoint example with value-weighted returns. We are interested in the effect of restricting listing exchanges on the estimation of the size premium. In the first function call, we compute returns based on breakpoints from all listing exchanges. Then, we computed returns based on breakpoints from NYSE-listed stocks.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nret_all = compute_portfolio_returns(\n  n_portfolios=2,\n  exchanges=[\"NYSE\", \"NASDAQ\", \"AMEX\"],\n  value_weighted=True,\n  data=crsp_monthly\n)\n\nret_nyse = compute_portfolio_returns(\n  n_portfolios=2,\n  exchanges=[\"NYSE\"],\n  value_weighted=True,\n  data=crsp_monthly\n)\n\ndata = pd.DataFrame([ret_all * 100, ret_nyse * 100], \n                    index =[\"NYSE, NASDAQ & AMEX\", \"NYSE\"])\ndata.columns = [\"Premium\"]\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Premium</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>NYSE, NASDAQ &amp; AMEX</th>\n      <td>0.030927</td>\n    </tr>\n    <tr>\n      <th>NYSE</th>\n      <td>0.330102</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe table shows that the size premium is more than 60 percent larger if we consider only stocks from NYSE to form the breakpoint each month. The NYSE-specific breakpoints are larger, and there are more than 50 percent of the stocks in the entire universe in the resulting small portfolio because NYSE firms are larger on average. The impact of this choice is not negligible.  \n\n## P-Hacking and Non-standard Errors\n\nSince the choice of the listing exchange has a significant impact, the next step is to investigate the effect of other data processing decisions researchers have to make along the way. \nIn particular, any portfolio sort analysis has to decide at least on the number of portfolios, the listing exchanges to form breakpoints, and equal- or value-weighting. \nFurther, one may exclude firms that are active in the finance industry or restrict the analysis to some parts of the time series. \nAll of the variations of these choices that we discuss here are part of scholarly articles published in the top finance journals. \nWe refer to @Walter2022 for an extensive set of other decision nodes at the discretion of researchers. \n\nThe intention of this application is to show that the different ways to form portfolios result in different estimated size premiums. Despite the effects of this multitude of choices, there is no correct way. It should also be noted that none of the procedures is wrong, the aim is simply to illustrate the changes that can arise due to the variation in the evidence-generating process [@Menkveld2022]. The term *non-standard errors* refers to the variation due to (suitable) choices made by researchers. Interestingly, in a large scale study, @Menkveld2022 find that the magnitude of non-standard errors are similar than the estimation uncertainty based on a chosen model which shows how important it is to adjust for the seemingly innocent choices in the data preparation and evaluation workflow. \\index{Standard errors!Non-standard error}\n\nFrom a malicious perspective, these modeling choices give the researcher multiple *chances* to find statistically significant results. Yet this is considered *p-hacking*, which renders the statistical inference due to multiple testing invalid [@Harvey2016].\\index{P-hacking} \n\nNevertheless, the multitude of options creates a problem since there is no single correct way of sorting portfolios. How should a researcher convince a reader that their results do not come from a p-hacking exercise? To circumvent this dilemma, academics are encouraged to present evidence from different sorting schemes as *robustness tests* and report multiple approaches to show that a result does not depend on a single choice. Thus, the robustness of premiums is a key feature.\\index{Robustness tests}\n\nBelow we conduct a series of robustness tests which could also be interpreted as a p-hacking exercise. To do so, we examine the size premium in different specifications presented in the table `p_hacking_setup`. The function `expand_grid()` produces a table of all possible permutations of its arguments. Note that we use the argument `data` to exclude financial firms and truncate the time series. \n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nn_portfolios = [2, 5, 10]\nexchanges = [[\"NYSE\"], [\"NYSE\", \"NASDAQ\", \"AMEX\"]]\nvalue_weighted = [True, False]\ndata = [crsp_monthly,\n        crsp_monthly[crsp_monthly[\"industry\"] != \"Finance\"],\n        crsp_monthly[crsp_monthly[\"month\"] < \"1990-06-01\"],\n        crsp_monthly[crsp_monthly[\"month\"] >= \"1990-06-01\"],\n        ]\np_hacking_setup = list(itertools.product(n_portfolios, exchanges, value_weighted, data))\n```\n:::\n\n\nTo speed the computation up we parallelize the (many) different sorting procedures, as in the beta estimation of Chapter 6. Finally, we report the resulting size premiums in descending order. There are indeed substantial size premiums possible in our data, in particular when we use equal-weighted portfolios. \n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\np_hacking_results = pd.DataFrame(p_hacking_setup)\np_hacking_results.columns = [\"n_portfolios\", \"exchanges\", \"value_weighted\", \"data\"]\nall_size_premia = pd.DataFrame()\nfor i in p_hacking_setup:\n    tmp_ret = compute_portfolio_returns(i[0], i[1], i[2], i[3])\n    all_size_premia = pd.concat([all_size_premia, tmp_ret])\n\np_hacking_results[\"size_premium\"] = all_size_premia.values\np_hacking_results\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>n_portfolios</th>\n      <th>exchanges</th>\n      <th>value_weighted</th>\n      <th>data</th>\n      <th>size_premium</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>[NYSE]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.003301</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>[NYSE]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.003478</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>[NYSE]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.003703</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>[NYSE]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.002979</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>[NYSE]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.002466</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2</td>\n      <td>[NYSE]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.002789</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2</td>\n      <td>[NYSE]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.002716</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2</td>\n      <td>[NYSE]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.002266</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.000309</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.000177</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.000098</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.000444</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>2</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.002787</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>2</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.003206</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>2</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.002015</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>2</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.003280</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>5</td>\n      <td>[NYSE]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.003995</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>5</td>\n      <td>[NYSE]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.004559</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>5</td>\n      <td>[NYSE]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.004900</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>5</td>\n      <td>[NYSE]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.003271</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>5</td>\n      <td>[NYSE]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.004141</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>5</td>\n      <td>[NYSE]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.004849</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>5</td>\n      <td>[NYSE]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.005077</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>5</td>\n      <td>[NYSE]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.003392</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>5</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.002971</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>5</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.003616</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>5</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.003443</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>5</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.002669</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>5</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.008714</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>5</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.009993</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>5</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.007239</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>5</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.009655</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>10</td>\n      <td>[NYSE]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.004637</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>10</td>\n      <td>[NYSE]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.005299</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>10</td>\n      <td>[NYSE]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.006095</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>10</td>\n      <td>[NYSE]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.003470</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>10</td>\n      <td>[NYSE]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.005819</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>10</td>\n      <td>[NYSE]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.006692</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>10</td>\n      <td>[NYSE]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.006765</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>10</td>\n      <td>[NYSE]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.005062</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>10</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.010768</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>10</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.012280</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>10</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.011432</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>10</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>True</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.010345</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>10</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.018257</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>10</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.020259</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>10</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.015492</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>10</td>\n      <td>[NYSE, NASDAQ, AMEX]</td>\n      <td>False</td>\n      <td>permno  date      month       ret   ...</td>\n      <td>0.020021</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## The Size-Premium Variation\n\nWe provide a graph in @fig-803 that shows the different premiums. The figure also shows the relation to the average Fama-French SMB (small minus big) premium used in the literature which we include as a dotted vertical line.\\index{Size!Size premium}\\index{Graph!Bar chart}\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\np_hacking_results_figure = (ggplot(\n  p_hacking_results, aes(x=\"size_premium\")) \n  + geom_histogram(bins=len(p_hacking_results))\n  + scale_x_continuous(labels=percent_format())\n  + labs(x=None, y=None, fill=None, color=None, \n         title=\"Distribution of size premiums for different sorting choices\")\n  + geom_vline(aes(xintercept=factors_ff_monthly[\"smb\"].mean()), linetype=\"dashed\")\n)\np_hacking_results_figure.draw()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n![The dashed vertical line indicates the average Fama-French SMB premium.](size-sorts-and-p-hacking_files/figure-html/fig-803-output-1.png){#fig-803 fig-alt='Title: Distribution of size premiums for different sorting choices. The figure shows a histogram of size premiums based on different sorting choices. The variation is huge, but the estimated coefficients are positive for all choices.'}\n:::\n:::\n\n\n## Exercises\n\n1. We gained several insights on the size distribution above. However, we did not analyze the average size across listing exchanges and industries. Which listing exchanges/industries have the largest firms? Plot the average firm size for the three listing exchanges over time. What do you conclude?\n1. We compute breakpoints but do not take a look at them in the exposition above. This might cover potential data errors. Plot the breakpoints for ten size portfolios over time. Then, take the difference between the two extreme portfolios and plot it. Describe your results.\n1. The returns that we analyse above do not account for differences in the exposure to market risk, i.e., the CAPM beta. Change the function `compute_portfolio_returns()` to output the CAPM alpha or beta instead of the average excess return. \n1. While you saw the spread in returns from the p-hacking exercise, we did not show which choices led to the largest effects. Find a way to investigate which choice variable has the largest impact on the estimated size premium.\n1. We computed several size premiums, but they do not follow the definition of @Fama1993. Which of our approaches comes closest to their SMB premium?\n\n",
    "supporting": [
      "size-sorts-and-p-hacking_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}