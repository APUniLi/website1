{
  "hash": "3dc6f0d5fe0af9534870ca8d21405c0e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Clean Enhanced TRACE with R\naliases:\n  - ../clean-enhanced-trace-with-r.html\npre-render:\n  - pre_render_script.R\nmetadata:\n  pagetitle: Clean Enhanced TRACE with R\n  description-meta: Copy the code to clean enhanced TRACE bond transaction data using the programming language R. \n---\n\n\n::: callout-note\nYou are reading **Tidy Finance with R**. You can find the equivalent chapter for the sibling **Tidy Finance with Python** [here](../python/clean-enhanced-trace-with-python.qmd).\n:::\n\nThis appendix contains code to clean enhanced TRACE with R. It is also available via the following Github [gist](https://gist.github.com/patrick-weiss/3a05b3ab281563b2e94858451c2eb3a4).\\index{Github!Gist} Hence, you could also source the function with `devtools::source_gist(\"3a05b3ab281563b2e94858451c2eb3a4\")`. We need this function in Chapter [TRACE and FISD](trace-and-fisd.qmd) to download and clean enhanced TRACE trade messages following @Dick2009 and @Dick2014 for enhanced TRACE specifically. Related, WRDS provides SAS code and there is Python code available by the project [Open Source Bond Asset Pricing](https://openbondassetpricing.com/).\n\nThe function takes a vector of CUSIPs (in `cusips`), a connection to WRDS (`connection`) explained in Chapter 3, and a start and end date (`start_date` and `end_date`, respectively). Specifying too many CUSIPs will result in very slow downloads and a potential failure due to the size of the request to WRDS. The dates should be within the coverage of TRACE itself, i.e., starting after 2002, and the dates should be supplied using the class date. The output of the function contains all valid trade messages for the selected CUSIPs over the specified period.\\index{CUSIP}\\index{Dick-Nielsen cleaning} \n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_enhanced_trace <- function(cusips,\n                                 connection,\n                                 start_date = as.Date(\"2002-01-01\"),\n                                 end_date = today()) {\n\n  # Packages (required)\n  library(tidyverse)\n  library(dbplyr)\n  library(RPostgres)\n\n  # Function checks ---------------------------------------------------------\n  # Input parameters\n  ## Cusips\n  if (length(cusips) == 0 | any(is.na(cusips))) stop(\"Check cusips.\")\n\n  ## Dates\n  if (!is.Date(start_date) | !is.Date(end_date)) stop(\"Dates needed\")\n  if (start_date < as.Date(\"2002-01-01\")) stop(\"TRACE starts later.\")\n  if (end_date > today()) stop(\"TRACE does not predict the future.\")\n  if (start_date >= end_date) stop(\"Date conflict.\")\n\n  ## Connection\n  if (!dbIsValid(connection)) stop(\"Connection issue.\")\n\n  # Enhanced Trace ----------------------------------------------------------\n  # Main file\n  trace_all <- tbl(\n    connection,\n    in_schema(\"trace\", \"trace_enhanced\")\n  ) |>\n    filter(cusip_id %in% cusips) |>\n    filter(trd_exctn_dt >= start_date & trd_exctn_dt <= end_date) |>\n    select(\n      cusip_id, msg_seq_nb, orig_msg_seq_nb,\n      entrd_vol_qt, rptd_pr, yld_pt, rpt_side_cd, cntra_mp_id,\n      trd_exctn_dt, trd_exctn_tm, trd_rpt_dt, trd_rpt_tm,\n      pr_trd_dt, trc_st, asof_cd, wis_fl,\n      days_to_sttl_ct, stlmnt_dt, spcl_trd_fl\n    ) |>\n    collect()\n\n  # Enhanced Trace: Post 06-02-2012 -----------------------------------------\n  # Trades (trc_st = T) and correction (trc_st = R)\n  trace_post_TR <- trace_all |>\n    filter(\n      (trc_st == \"T\" | trc_st == \"R\"),\n      trd_rpt_dt >= as.Date(\"2012-02-06\")\n    )\n\n  # Cancellations (trc_st = X) and correction cancellations (trc_st = C)\n  trace_post_XC <- trace_all |>\n    filter(\n      (trc_st == \"X\" | trc_st == \"C\"),\n      trd_rpt_dt >= as.Date(\"2012-02-06\")\n    )\n\n  # Cleaning corrected and cancelled trades\n  trace_post_TR <- trace_post_TR |>\n    anti_join(trace_post_XC,\n      join_by(\n        cusip_id, msg_seq_nb, entrd_vol_qt,\n        rptd_pr, rpt_side_cd, cntra_mp_id,\n        trd_exctn_dt, trd_exctn_tm\n      )\n    )\n\n  # Reversals (trc_st = Y)\n  trace_post_Y <- trace_all |>\n    filter(\n      trc_st == \"Y\",\n      trd_rpt_dt >= as.Date(\"2012-02-06\")\n    )\n\n  # Clean reversals\n  ## match the orig_msg_seq_nb of the Y-message to\n  ## the msg_seq_nb of the main message\n  trace_post <- trace_post_TR |>\n    anti_join(trace_post_Y,\n      join_by(\n        cusip_id,\n        msg_seq_nb == orig_msg_seq_nb,\n        entrd_vol_qt, rptd_pr, rpt_side_cd,\n        cntra_mp_id, trd_exctn_dt, trd_exctn_tm\n      )\n    )\n\n\n  # Enhanced TRACE: Pre 06-02-2012 ------------------------------------------\n  # Cancelations (trc_st = C)\n  trace_pre_C <- trace_all |>\n    filter(\n      trc_st == \"C\",\n      trd_rpt_dt < as.Date(\"2012-02-06\")\n    )\n\n  # Trades w/o cancellations\n  ## match the orig_msg_seq_nb of the C-message\n  ## to the msg_seq_nb of the main message\n  trace_pre_T <- trace_all |>\n    filter(\n      trc_st == \"T\",\n      trd_rpt_dt < as.Date(\"2012-02-06\")\n    ) |>\n    anti_join(trace_pre_C,\n      join_by(\n        cusip_id,\n        msg_seq_nb == orig_msg_seq_nb,\n        entrd_vol_qt, rptd_pr, rpt_side_cd,\n        cntra_mp_id, trd_exctn_dt, trd_exctn_tm\n      )\n    )\n\n  # Corrections (trc_st = W) - W can also correct a previous W\n  trace_pre_W <- trace_all |>\n    filter(\n      trc_st == \"W\",\n      trd_rpt_dt < as.Date(\"2012-02-06\")\n    )\n\n  # Implement corrections in a loop\n  ## Correction control\n  correction_control <- nrow(trace_pre_W)\n  correction_control_last <- nrow(trace_pre_W)\n\n  ## Correction loop\n  while (correction_control > 0) {\n    # Corrections that correct some msg\n    trace_pre_W_correcting <- trace_pre_W |>\n      semi_join(trace_pre_T,\n        join_by(\n          cusip_id, trd_exctn_dt,\n          orig_msg_seq_nb == msg_seq_nb\n        )\n      )\n\n    # Corrections that do not correct some msg\n    trace_pre_W <- trace_pre_W |>\n      anti_join(trace_pre_T,\n        join_by(cusip_id, trd_exctn_dt,\n          orig_msg_seq_nb == msg_seq_nb\n        )\n      )\n\n    # Delete msgs that are corrected and add correction msgs\n    trace_pre_T <- trace_pre_T |>\n      anti_join(trace_pre_W_correcting,\n        join_by(\n          cusip_id, trd_exctn_dt,\n          msg_seq_nb == orig_msg_seq_nb\n        )\n      ) |>\n      union_all(trace_pre_W_correcting)\n\n    # Escape if no corrections remain or they cannot be matched\n    correction_control <- nrow(trace_pre_W)\n    if (correction_control == correction_control_last) {\n      correction_control <- 0\n    }\n    correction_control_last <- nrow(trace_pre_W)\n  }\n\n\n  # Clean reversals\n  ## Record reversals\n  trace_pre_R <- trace_pre_T |>\n    filter(asof_cd == \"R\") |>\n    group_by(\n      cusip_id, trd_exctn_dt, entrd_vol_qt,\n      rptd_pr, rpt_side_cd, cntra_mp_id\n    ) |>\n    arrange(trd_exctn_tm, trd_rpt_dt, trd_rpt_tm) |>\n    mutate(seq = row_number()) |>\n    ungroup()\n\n  ## Remove reversals and the reversed trade\n  trace_pre <- trace_pre_T |>\n    filter(is.na(asof_cd) | !(asof_cd %in% c(\"R\", \"X\", \"D\"))) |>\n    group_by(\n      cusip_id, trd_exctn_dt, entrd_vol_qt,\n      rptd_pr, rpt_side_cd, cntra_mp_id\n    ) |>\n    arrange(trd_exctn_tm, trd_rpt_dt, trd_rpt_tm) |>\n    mutate(seq = row_number()) |>\n    ungroup() |>\n    anti_join(trace_pre_R,\n      join_by(\n        cusip_id, trd_exctn_dt, entrd_vol_qt,\n        rptd_pr, rpt_side_cd, cntra_mp_id, seq\n      )\n    ) |>\n    select(-seq)\n\n\n  # Agency trades -----------------------------------------------------------\n  # Combine pre and post trades\n  trace_clean <- trace_post |>\n    union_all(trace_pre)\n\n  # Keep angency sells and unmatched agency buys\n  ## Agency sells\n  trace_agency_sells <- trace_clean |>\n    filter(\n      cntra_mp_id == \"D\",\n      rpt_side_cd == \"S\"\n    )\n\n  # Agency buys that are unmatched\n  trace_agency_buys_filtered <- trace_clean |>\n    filter(\n      cntra_mp_id == \"D\",\n      rpt_side_cd == \"B\"\n    ) |>\n    anti_join(trace_agency_sells,\n      join_by(\n        cusip_id, trd_exctn_dt,\n        entrd_vol_qt, rptd_pr\n      )\n    )\n\n  # Agency clean\n  trace_clean <- trace_clean |>\n    filter(cntra_mp_id == \"C\") |>\n    union_all(trace_agency_sells) |>\n    union_all(trace_agency_buys_filtered)\n\n\n  # Additional Filters ------------------------------------------------------\n  trace_add_filters <- trace_clean |>\n    mutate(days_to_sttl_ct2 = stlmnt_dt - trd_exctn_dt) |>\n    filter(\n      is.na(days_to_sttl_ct) | as.numeric(days_to_sttl_ct) <= 7,\n      is.na(days_to_sttl_ct2) | as.numeric(days_to_sttl_ct2) <= 7,\n      wis_fl == \"N\",\n      is.na(spcl_trd_fl) | spcl_trd_fl == \"\",\n      is.na(asof_cd) | asof_cd == \"\"\n    )\n\n\n  # Output ------------------------------------------------------------------\n  # Only keep necessary columns\n  trace_final <- trace_add_filters |>\n    arrange(cusip_id, trd_exctn_dt, trd_exctn_tm) |>\n    select(\n      cusip_id, trd_exctn_dt, trd_exctn_tm,\n      rptd_pr, entrd_vol_qt, yld_pt, rpt_side_cd, cntra_mp_id\n    ) |>\n    mutate(trd_exctn_tm = format(as_datetime(trd_exctn_tm), \"%H:%M:%S\"))\n\n  # Return\n  return(trace_final)\n}\n```\n:::",
    "supporting": [
      "clean-enhanced-trace-with-r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}