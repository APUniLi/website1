{
  "hash": "e60d7a98d28b774913af92c171891419",
  "result": {
    "markdown": "---\ntitle: WRDS, CRSP, and Compustat\naliases:\n  - ../wrds-crsp-and-compustat.html\npre-render:\n  - pre_render_script.R\n---\n\n\nThis chapter shows how to connect to [Wharton Research Data Services (WRDS)](https://wrds-www.wharton.upenn.edu/), a popular provider of financial and economic data for research applications. We use this connection to download the most commonly used data for stock and firm characteristics, CRSP and Compustat. Unfortunately, this data is not freely available, but most students and researchers typically have access to WRDS through their university libraries. Assuming that you have access to WRDS, we show you how to prepare and merge the databases and store them in the `SQLite`-database introduced in the previous chapter. We conclude this chapter by providing some tips for working with the WRDS database.\\index{WRDS}\n\nFirst, we load the packages that we use throughout this chapter. Later on, we load more packages in the sections where we need them. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(RSQLite)\nlibrary(dbplyr)\n```\n:::\n\n\nWe use the same date range as in the previous chapter to ensure consistency.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_date <- ymd(\"1960-01-01\")\nend_date <- ymd(\"2022-12-31\")\n```\n:::\n\n\n## Accessing WRDS\n\nWRDS is the most widely used source for asset and firm-specific financial data used in academic settings. WRDS is a data platform that provides data validation, flexible delivery options, and access to many different data sources. The data at WRDS is also organized in an SQL database, although they use the [PostgreSQL](https://www.postgresql.org/) engine. This database engine is just as easy to handle with R as SQLite. We use the `RPostgres` package to establish a connection to the WRDS database [@RPostgres]. Note that you could also use the `odbc` package to connect to a PostgreSQL database, but then you need to install the appropriate drivers yourself. `RPostgres` already contains a suitable driver.\\index{Database!PostgreSQL}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RPostgres)\n```\n:::\n\n\nTo establish a connection, you use the function `dbConnect()` with the following arguments. Note that you need to replace the `user` and `password` arguments with your own credentials. We defined system variables for the purpose of this book because we obviously do not want (and are not allowed) to share our credentials with the rest of the world (these system variables are stored in an `.Renviron`-file and loaded with the `Sys.getenv()` function).\n\nAdditionally, you have to use multi-factor (i.e., two-factor) authentication since May 2023 when establishing a `PostgreSQL` or other remote connections. You have two choices to provide the additional identification. First, if you have Duo Push enabled for your WRDS account, you will receive a push notification on your mobile phone when trying to establish a connection with the code below. Upon accepting the notification, you can continue your work. Second, you can log in to a WRDS website that requires multi-factor authentication with your username and the same IP address. Once you have successfully identified yourself on the website, your username-IP combination will be remembered for 30 days, and you can comfortably use the remote connection below.\\index{Two-factor authentication}\\index{WRDS:Two-factor authentication}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrds <- dbConnect(\n  Postgres(),\n  host = \"wrds-pgdata.wharton.upenn.edu\",\n  dbname = \"wrds\",\n  port = 9737,\n  sslmode = \"require\",\n  user = Sys.getenv(\"WRDS_USER\"),\n  password = Sys.getenv(\"WRDS_PASSWORD\")\n)\n```\n:::\n\n\nThe remote connection to WRDS is very useful. Yet, the database itself contains many different tables. You can check the WRDS homepage to identify the table's name you are looking for (if you go beyond our exposition). Alternatively, you can also query the data structure with the function `dbSendQuery()`. If you are interested, there is an exercise below that is based on WRDS' tutorial on [\"Querying WRDS Data using R\".](https://wrds-www.wharton.upenn.edu/pages/support/programming-wrds/programming-r/querying-wrds-data-r/)  Furthermore, the penultimate section of this chapter shows how to investigate the structure of databases.\n\n## Downloading and Preparing CRSP\n\n\\index{Data!CRSP}[The Center for Research in Security Prices (CRSP)](https://crsp.org/) provides the most widely used data for US stocks. We use the `wrds` connection object that we just created to first access monthly CRSP return data. Actually, we need three tables to get the desired data: (i) the CRSP monthly security file,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsf_db <- tbl(wrds, in_schema(\"crsp\", \"msf\"))\n```\n:::\n\n\n(ii) the identifying information,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsenames_db <- tbl(wrds, in_schema(\"crsp\", \"msenames\"))\n```\n:::\n\n\nand (iii) the delisting information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsedelist_db <- tbl(wrds, in_schema(\"crsp\", \"msedelist\"))\n```\n:::\n\n\nWe use the three remote tables to fetch the data we want to put into our local database. Just as above, the idea is that we let the WRDS database do all the work and just download the data that we actually need. We apply common filters and data selection criteria to narrow down our data of interest: (i) we keep only data in the time windows of interest, (ii) we keep only US-listed stocks as identified via share codes `shrcd` 10 and 11, and (iii) we keep only months within permno-specific start dates `namedt` and end dates `nameendt`. In addition, we add delisting codes  and returns. You can read up in the great textbook of @BaliEngleMurray2016 for an extensive discussion on the filters we apply in the code below.\\index{Permno}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrsp_monthly <- msf_db |>\n  filter(date >= start_date & date <= end_date) |>\n  inner_join(\n    msenames_db |>\n      filter(shrcd %in% c(10, 11)) |>\n      select(permno, exchcd, siccd, namedt, nameendt),\n    by = c(\"permno\")\n  ) |>\n  filter(date >= namedt & date <= nameendt) |>\n  mutate(month = floor_date(date, \"month\")) |>\n  left_join(\n    msedelist_db |>\n      select(permno, dlstdt, dlret, dlstcd) |>\n      mutate(month = floor_date(dlstdt, \"month\")),\n    by = c(\"permno\", \"month\")\n  ) |>\n  select(\n    permno, # Security identifier\n    date, # Date of the observation\n    month, # Month of the observation\n    ret, # Return\n    shrout, # Shares outstanding (in thousands)\n    altprc, # Last traded price in a month\n    exchcd, # Exchange code\n    siccd, # Industry code\n    dlret, # Delisting return\n    dlstcd # Delisting code\n  ) |>\n  collect() |>\n  mutate(\n    month = ymd(month),\n    shrout = shrout * 1000\n  )\n```\n:::\n\n\nNow, we have all the relevant monthly return data in memory and proceed with preparing the data for future analyses. We perform the preparation step at the current stage since we want to avoid executing the same mutations every time we use the data in subsequent chapters. \n\nThe first additional variable we create is market capitalization (`mktcap`), which is the product of the number of outstanding shares `shrout` and the last traded price in a month `altprc`.\\index{Market capitalization} Note that in contrast to returns `ret`, these two variables are not adjusted ex-post for any corporate actions like stock splits. Moreover, the `altprc` is negative whenever the last traded price does not exist, and CRSP decides to report the mid-quote of the last available order book instead. Hence, we take the absolute value of the market cap. We also keep the market cap in millions of USD just for convenience as we do not want to print huge numbers in our figures and tables. In addition, we set zero market cap to missing as it makes conceptually little sense (i.e., the firm would be bankrupt).\\index{Stock price}\\index{Returns}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrsp_monthly <- crsp_monthly |>\n  mutate(\n    mktcap = abs(shrout * altprc) / 10^6,\n    mktcap = na_if(mktcap, 0)\n  )\n```\n:::\n\n\nThe next variable we frequently use is the one-month *lagged* market capitalization. Lagged market capitalization is typically used to compute value-weighted portfolio returns, as we demonstrate in a later chapter. The most simple and consistent way to add a column with lagged market cap values is to add one month to each observation and then join the information to our monthly CRSP data.\\index{Weighting!Value}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmktcap_lag <- crsp_monthly |>\n  mutate(month = month %m+% months(1)) |>\n  select(permno, month, mktcap_lag = mktcap)\n\ncrsp_monthly <- crsp_monthly |>\n  left_join(mktcap_lag, by = c(\"permno\", \"month\"))\n```\n:::\n\n\nIf you wonder why we do not use the `lag()` function, e.g., via `crsp_monthly |> group_by(permno) |> mutate(mktcap_lag = lag(mktcap))`, take a look at the exercises.\n\nNext, we follow @BaliEngleMurray2016 in transforming listing exchange codes to explicit exchange names. \\index{Exchange!Exchange codes}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrsp_monthly <- crsp_monthly |>\n  mutate(exchange = case_when(\n    exchcd %in% c(1, 31) ~ \"NYSE\",\n    exchcd %in% c(2, 32) ~ \"AMEX\",\n    exchcd %in% c(3, 33) ~ \"NASDAQ\",\n    .default = \"Other\"\n  ))\n```\n:::\n\n\nSimilarly, we transform industry codes to industry descriptions following @BaliEngleMurray2016.\\index{Industry codes} Notice that there are also other categorizations of industries [e.g., @FamaFrench1997] that are commonly used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrsp_monthly <- crsp_monthly |>\n  mutate(industry = case_when(\n    siccd >= 1 & siccd <= 999 ~ \"Agriculture\",\n    siccd >= 1000 & siccd <= 1499 ~ \"Mining\",\n    siccd >= 1500 & siccd <= 1799 ~ \"Construction\",\n    siccd >= 2000 & siccd <= 3999 ~ \"Manufacturing\",\n    siccd >= 4000 & siccd <= 4899 ~ \"Transportation\",\n    siccd >= 4900 & siccd <= 4999 ~ \"Utilities\",\n    siccd >= 5000 & siccd <= 5199 ~ \"Wholesale\",\n    siccd >= 5200 & siccd <= 5999 ~ \"Retail\",\n    siccd >= 6000 & siccd <= 6799 ~ \"Finance\",\n    siccd >= 7000 & siccd <= 8999 ~ \"Services\",\n    siccd >= 9000 & siccd <= 9999 ~ \"Public\",\n    TRUE ~ \"Missing\"\n  ))\n```\n:::\n\n\nWe also construct returns adjusted for delistings as described by @BaliEngleMurray2016. The delisting of a security usually results when a company ceases operations, declares bankruptcy, merges, does not meet listing requirements, or seeks to become private. The adjustment tries to reflect the returns of investors who bought the stock in the month before the delisting and held it until the delisting date. After this transformation, we can drop the delisting returns and codes.\\index{Returns!Delisting}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrsp_monthly <- crsp_monthly |>\n  mutate(ret_adj = case_when(\n    is.na(dlstcd) ~ ret,\n    !is.na(dlstcd) & !is.na(dlret) ~ dlret,\n    dlstcd %in% c(500, 520, 580, 584) |\n      (dlstcd >= 551 & dlstcd <= 574) ~ -0.30,\n    dlstcd == 100 ~ ret,\n    TRUE ~ -1\n  )) |>\n  select(-c(dlret, dlstcd))\n```\n:::\n\n\nNext, we compute excess returns by subtracting the monthly risk-free rate provided by our Fama-French data.\\index{Returns!Excess}\\index{Risk-free rate} As we base all our analyses on the excess returns, we can drop adjusted returns and the risk-free rate from our tibble. Note that we ensure excess returns are bounded by -1 from below as a return less than -100% makes no sense conceptually. Before we can adjust the returns, we have to connect to our database and load the table `factors_ff3_monthly`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_finance <- dbConnect(\n  SQLite(),\n  \"data/tidy_finance.sqlite\",\n  extended_types = TRUE\n)\n\nfactors_ff3_monthly <- tbl(tidy_finance, \"factors_ff3_monthly\") |>\n  select(month, rf) |>\n  collect()\n\ncrsp_monthly <- crsp_monthly |>\n  left_join(factors_ff3_monthly,\n    by = \"month\"\n  ) |>\n  mutate(\n    ret_excess = ret_adj - rf,\n    ret_excess = pmax(ret_excess, -1)\n  ) |>\n  select(-ret_adj, -rf)\n```\n:::\n\n\nSince excess returns and market capitalization are crucial for all our analyses, we can safely exclude all observations with missing returns or market capitalization. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrsp_monthly <- crsp_monthly |>\n  drop_na(ret_excess, mktcap, mktcap_lag)\n```\n:::\n\n\nFinally, we store the monthly CRSP file in our database. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbWriteTable(tidy_finance,\n  \"crsp_monthly\",\n  value = crsp_monthly,\n  overwrite = TRUE\n)\n```\n:::\n\n\n## First Glimpse of the CRSP Sample\n\nBefore we move on to other data sources, let us look at some descriptive statistics of the CRSP sample, which is our main source for stock returns. \n\n@fig-211 shows the monthly number of securities by listing exchange over time. NYSE has the longest history in the data, but NASDAQ lists a considerably large number of stocks. The number of stocks listed on AMEX decreased steadily over the last couple of decades. By the end of 2022, there were 2,778 stocks with a primary listing on NASDAQ, 1,358 on NYSE, 162 on AMEX, and only one belonged to the other category. \\index{Exchange!NYSE}\\index{Exchange!AMEX}\\index{Exchange!NASDAQ}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrsp_monthly |>\n  count(exchange, date) |>\n  ggplot(aes(x = date, y = n, color = exchange, linetype = exchange)) +\n  geom_line() +\n  labs(\n    x = NULL, y = NULL, color = NULL, linetype = NULL,\n    title = \"Monthly number of securities by listing exchange\"\n  ) +\n  scale_x_date(date_breaks = \"10 years\", date_labels = \"%Y\") +\n  scale_y_continuous(labels = comma)\n```\n\n::: {.cell-output-display}\n![Number of stocks in the CRSP sample listed at each of the US exchanges.](wrds-crsp-and-compustat_files/figure-html/fig-211-1.png){#fig-211 fig-alt='Title: Monthly number of securities by listing exchange. The figure shows a line chart with the number of securities by listing exchange from 1960 to 2022. In the earlier period, NYSE dominated as a listing exchange. There is a strong upwards trend for NASDAQ. Other listing exchanges do only play a minor role.' width=2100}\n:::\n:::\n\n\nNext, we look at the aggregate market capitalization grouped by the respective listing exchanges in @fig-212. To ensure that we look at meaningful data which is comparable over time, we adjust the nominal values for inflation. In fact, we can use the tables that are already in our database to calculate aggregate market caps by listing exchange and plotting it just as if they were in memory. All values in @fig-212 are at the end of 2022 USD to ensure intertemporal comparability. NYSE-listed stocks have by far the largest market capitalization, followed by NASDAQ-listed stocks.\\index{Data!CPI}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(tidy_finance, \"crsp_monthly\") |>\n  left_join(tbl(tidy_finance, \"cpi_monthly\"), by = \"month\") |>\n  group_by(month, exchange) |>\n  summarize(\n    mktcap = sum(mktcap, na.rm = TRUE) / cpi,\n    .groups = \"drop\"\n  ) |>\n  collect() |>\n  mutate(month = ymd(month)) |>\n  ggplot(aes(\n    x = month, y = mktcap / 1000,\n    color = exchange, linetype = exchange\n  )) +\n  geom_line() +\n  labs(\n    x = NULL, y = NULL, color = NULL, linetype = NULL,\n    title = \"Monthly market cap by listing exchange in billions of Dec 2022 USD\"\n  ) +\n  scale_x_date(date_breaks = \"10 years\", date_labels = \"%Y\") +\n  scale_y_continuous(labels = comma)\n```\n\n::: {.cell-output-display}\n![Market capitalization is measured in billion USD, adjusted for consumer price index changes such that the values on the horizontal axis reflect the buying power of billion USD in December 2022.](wrds-crsp-and-compustat_files/figure-html/fig-212-1.png){#fig-212 fig-alt='Title: Monthly market cap by listing exchange in billion USD as of Dec 2022. The figure shows a line chart of the total market capitalization of all stocks aggregated by the listing exchange from 1960 to 2022, with years on the horizontal axis and the corresponding market capitalization on the vertical axis. Historically, NYSE listed stocks had the highest market capitalization. In the more recent past, the valuation of NASDAQ listed stocks exceeded that of NYSE listed stocks.' width=2100}\n:::\n:::\n\n\nOf course, performing the computation in the database is not really meaningful because we can easily pull all the required data into our memory. The code chunk above is slower than performing the same steps on tables that are already in memory. However, we just want to illustrate that you can perform many things in the database before loading the data into your memory. Before we proceed, we load the monthly CPI data.\\index{Data!CPI}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncpi_monthly <- tbl(tidy_finance, \"cpi_monthly\") |>\n  collect()\n```\n:::\n\n\nNext, we look at the same descriptive statistics by industry. @fig-213 plots the number of stocks in the sample for each of the SIC industry classifiers. For most of the sample period, the largest share of stocks is in manufacturing, albeit the number peaked somewhere in the 90s. The number of firms associated with public administration seems to be the only category on the rise in recent years, even surpassing manufacturing at the end of our sample period.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrsp_monthly_industry <- crsp_monthly |>\n  left_join(cpi_monthly, by = \"month\") |>\n  group_by(month, industry) |>\n  summarize(\n    securities = n_distinct(permno),\n    mktcap = sum(mktcap) / mean(cpi),\n    .groups = \"drop\"\n  )\n\ncrsp_monthly_industry |>\n  ggplot(aes(\n    x = month,\n    y = securities,\n    color = industry,\n    linetype = industry\n  )) +\n  geom_line() +\n  labs(\n    x = NULL, y = NULL, color = NULL, linetype = NULL,\n    title = \"Monthly number of securities by industry\"\n  ) +\n  scale_x_date(date_breaks = \"10 years\", date_labels = \"%Y\") +\n  scale_y_continuous(labels = comma)\n```\n\n::: {.cell-output-display}\n![Number of stocks in the CRSP sample associated with different industries.](wrds-crsp-and-compustat_files/figure-html/fig-213-1.png){#fig-213 fig-alt='Title: Monthly number of securities by industry. The figure shows a line chart of the number of securities by industry from 1960 to 2022 with years on the horizontal axis and the corresponding number on the vertical axis. Except for stocks that are assigned to the industry public administration, the number of listed stocks decreased steadily at least since 1996. As of 2022, the segment of firms within public administration is the largest in terms of the number of listed stocks.' width=2100}\n:::\n:::\n\n\nWe also compute the market cap of all stocks belonging to the respective industries and show the evolution over time in @fig-214. All values are again in terms of billions of end of 2022 USD. At all points in time, manufacturing firms comprise of the largest portion of market capitalization. Toward the end of the sample, however, financial firms and services begin to make up a substantial portion of the market cap.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrsp_monthly_industry |>\n  ggplot(aes(\n    x = month,\n    y = mktcap / 1000,\n    color = industry,\n    linetype = industry\n  )) +\n  geom_line() +\n  labs(\n    x = NULL, y = NULL, color = NULL, linetype = NULL,\n    title = \"Monthly total market cap by industry in billions as of Dec 2022 USD\"\n  ) +\n  scale_x_date(date_breaks = \"10 years\", date_labels = \"%Y\") +\n  scale_y_continuous(labels = comma)\n```\n\n::: {.cell-output-display}\n![Market capitalization is measured in billion USD, adjusted for consumer price index changes such that the values on the y-axis reflect the buying power of billion USD in December 2022.](wrds-crsp-and-compustat_files/figure-html/fig-214-1.png){#fig-214 fig-alt='Title: Monthly total market cap by industry in billions as of Dec 2022 USD. The figure shows a line chart of total market capitalization of all stocks in the CRSP sample aggregated by industry from 1960 to 2022 with years on the horizontal axis and the corresponding market capitalization on the vertical axis. Stocks in the manufacturing sector have always had the highest market valuation. The figure shows a general upwards trend during the most recent past. ' width=2100}\n:::\n:::\n\n\n## Daily CRSP Data\n\nBefore we turn to accounting data, we provide a proposal for downloading daily CRSP data. While the monthly data from above typically fit into your memory and can be downloaded in a meaningful amount of time, this is usually not true for daily return data. The daily CRSP data file is substantially larger than monthly data and can exceed 20GB. This has two important implications: you cannot hold all the daily return data in your memory (hence it is not possible to copy the entire data set to your local database), and in our experience, the download usually crashes (or never stops) because it is too much data for the WRDS cloud to prepare and send to your R session. \n\nThere is a solution to this challenge. As with many *big data* problems, you can split up the big task into several smaller tasks that are easy to handle.\\index{Big data} That is, instead of downloading data about many stocks all at once, download the data in small batches for each stock consecutively. Such operations can be implemented in `for()`-loops,\\index{For-loops} where we download, prepare, and store the data for a single stock in each iteration. This operation might nonetheless take a couple of hours, so you have to be patient either way (we often run such code overnight). To keep track of the progress, we create ad-hoc progress updates using `cat()`. Eventually, we end up with more than 71 million rows of daily return data. Note that we only store the identifying information that we actually need, namely `permno`, `date`, and `month` alongside the excess returns. We thus ensure that our local database contains only the data we actually use and that we can load the full daily data into our memory later. Notice that we also use the function `dbWriteTable()` here with the option to append the new data to an existing table, when we process the second and all following batches. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndsf_db <- tbl(wrds, in_schema(\"crsp\", \"dsf\"))\n\nfactors_ff3_daily <- tbl(tidy_finance, \"factors_ff3_daily\") |>\n  collect()\n\npermnos <- tbl(tidy_finance, \"crsp_monthly\") |>\n  distinct(permno) |>\n  pull()\n\nfor (j in 1:length(permnos)) {\n  permno_sub <- permnos[j]\n  crsp_daily_sub <- dsf_db |>\n    filter(permno == permno_sub &\n      date >= start_date & date <= end_date) |>\n    select(permno, date, ret) |>\n    collect() |>\n    drop_na()\n\n  if (nrow(crsp_daily_sub) > 0) {\n    crsp_daily_sub <- crsp_daily_sub |>\n      mutate(month = floor_date(date, \"month\")) |>\n      left_join(factors_ff3_daily |>\n                  select(date, rf), by = \"date\") |>\n      mutate(\n        ret_excess = ret - rf,\n        ret_excess = pmax(ret_excess, -1)\n      ) |>\n      select(permno, date, month, ret_excess)\n\n    dbWriteTable(tidy_finance,\n      \"crsp_daily\",\n      value = crsp_daily_sub,\n      overwrite = ifelse(j == 1, TRUE, FALSE),\n      append = ifelse(j != 1, TRUE, FALSE)\n    )\n  }\n  cat(\"Index\", j, \"out of\", length(permnos), \"done (\", \n      percent(j / length(permnos)), \")\\n\")\n}\n```\n:::\n\n\nTo the best of our knowledge, the daily CRSP data does not require any adjustments like the monthly data. The adjustment of the monthly data comes from the fact that CRSP aggregates daily data into monthly observations and has to decide which prices and returns to record if a stock gets delisted. In the daily data, there is simply no price or return after delisting, so there is also no aggregation problem.\n\n## Preparing Compustat data\n\nFirm accounting data are an important source of information that we use in portfolio analyses in subsequent chapters. The commonly used source for firm financial information is Compustat provided by [S&P Global Market Intelligence,](https://www.spglobal.com/marketintelligence/en/) which is a global data vendor that provides financial, statistical, and market information on active and inactive companies throughout the world.\\index{Data!Compustat} For US and Canadian companies, annual history is available back to 1950 and quarterly as well as monthly histories date back to 1962.\n\nTo access Compustat data, we can again tap WRDS, which hosts the `funda` table that contains annual firm-level information on North American companies.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunda_db <- tbl(wrds, in_schema(\"comp\", \"funda\"))\n```\n:::\n\n\nWe follow the typical filter conventions and pull only data that we actually need: (i) we get only records in industrial data format, (ii) in the standard format (i.e., consolidated information in standard presentation), and (iii) only data in the desired time window.\\index{Gvkey}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompustat <- funda_db |>\n  filter(\n    indfmt == \"INDL\" &\n      datafmt == \"STD\" &\n      consol == \"C\" &\n      datadate >= start_date & datadate <= end_date\n  ) |>\n  select(\n    gvkey, # Firm identifier\n    datadate, # Date of the accounting data\n    seq, # Stockholders' equity\n    ceq, # Total common/ordinary equity\n    at, # Total assets\n    lt, # Total liabilities\n    txditc, # Deferred taxes and investment tax credit\n    txdb, # Deferred taxes\n    itcb, # Investment tax credit\n    pstkrv, # Preferred stock redemption value\n    pstkl, # Preferred stock liquidating value\n    pstk, # Preferred stock par value\n    capx, # Capital investment\n    oancf, # Operating cash flow\n    sale,  # Revenue\n    cogs, # Costs of goods sold\n    xint, # Interest expense\n    xsga # Selling, general, and administrative expenses\n  ) |>\n  collect()\n```\n:::\n\n\nNext, we calculate the book value of preferred stock and equity `be` and the operating profitability `op` inspired by the [variable definitions in Ken French's data library.](https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/Data_Library/variable_definitions.html) Note that we set negative or zero equity to missing which is a common practice when working with book-to-market ratios [see @Fama1992 for details].\\index{Book equity}\\index{Preferred stock}\\index{Operating profitability}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompustat <- compustat |>\n  mutate(\n    be = coalesce(seq, ceq + pstk, at - lt) +\n      coalesce(txditc, txdb + itcb, 0) -\n      coalesce(pstkrv, pstkl, pstk, 0),\n    be = if_else(be <= 0, as.numeric(NA), be),\n    op = (sale - coalesce(cogs, 0) - \n            coalesce(xsga, 0) - coalesce(xint, 0)) / be,\n  )\n```\n:::\n\n\nWe keep only the last available information for each firm-year group. Note that `datadate` defines the time the corresponding financial data refers to (e.g., annual report as of December 31, 2022). Therefore, `datadate` is not the date when data was made available to the public. Check out the exercises for more insights into the peculiarities of `datadate`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompustat <- compustat |>\n  mutate(year = year(datadate)) |>\n  group_by(gvkey, year) |>\n  filter(datadate == max(datadate)) |>\n  ungroup()\n```\n:::\n\n\nWe also compute the investment ratio `inv` according to Ken French's variable definitions as the change in total assets from one fiscal year to another. Note that we again use the approach using joins as introduced with the CRSP data above to construct lagged assets.\\index{Investment ratio}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompustat <- compustat |> \n  left_join(\n    compustat |> \n      select(gvkey, year, at_lag = at) |> \n      mutate(year = year + 1), by = c(\"gvkey\", \"year\")\n  ) |> \n  mutate(\n    inv = at / at_lag - 1,\n    inv = if_else(at_lag <= 0, as.numeric(NA), inv)\n  )\n```\n:::\n\n\nWith the last step, we are already done preparing the firm fundamentals. Thus, we can store them in our local database.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbWriteTable(tidy_finance,\n  \"compustat\",\n  value = compustat,\n  overwrite = TRUE\n)\n```\n:::\n\n\n## Merging CRSP with Compustat\n\nUnfortunately, CRSP and Compustat use different keys to identify stocks and firms. CRSP uses `permno` for stocks, while Compustat uses `gvkey` to identify firms. Fortunately, a curated matching table on WRDS allows us to merge CRSP and Compustat, so we create a connection to the *CRSP-Compustat Merged* table (provided by CRSP).\\index{Data!Crsp-Compustat Merged}\\index{Permno}\\index{Gvkey}\\index{Data!Linking table}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nccmxpf_linktable_db <- tbl(\n  wrds,\n  in_schema(\"crsp\", \"ccmxpf_linktable\")\n)\n```\n:::\n\n\nThe linking table contains links between CRSP and Compustat identifiers from various approaches. However, we need to make sure that we keep only relevant and correct links, again following the description outlined in @BaliEngleMurray2016. Note also that currently active links have no end date, so we just enter the current date via `today()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nccmxpf_linktable <- ccmxpf_linktable_db |>\n  filter(linktype %in% c(\"LU\", \"LC\") &\n    linkprim %in% c(\"P\", \"C\") &\n    usedflag == 1) |>\n  select(permno = lpermno, gvkey, linkdt, linkenddt) |>\n  collect() |>\n  mutate(linkenddt = replace_na(linkenddt, today()))\n```\n:::\n\n\nWe use these links to create a new table with a mapping between stock identifier, firm identifier, and month. We then add these links to the Compustat `gvkey` to our monthly stock data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nccm_links <- crsp_monthly |>\n  inner_join(ccmxpf_linktable, \n             by = \"permno\", relationship = \"many-to-many\") |>\n  filter(!is.na(gvkey) & \n           (date >= linkdt & date <= linkenddt)) |>\n  select(permno, gvkey, date)\n\ncrsp_monthly <- crsp_monthly |>\n  left_join(ccm_links, by = c(\"permno\", \"date\"))\n```\n:::\n\n\nAs the last step, we update the previously prepared monthly CRSP file with the linking information in our local database.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbWriteTable(tidy_finance,\n  \"crsp_monthly\",\n  value = crsp_monthly,\n  overwrite = TRUE\n)\n```\n:::\n\n\nBefore we close this chapter, let us look at an interesting descriptive statistic of our data. As the book value of equity plays a crucial role in many asset pricing applications, it is interesting to know for how many of our stocks this information is available. Hence, @fig-215 plots the share of securities with book equity values for each exchange. It turns out that the coverage is pretty bad for AMEX- and NYSE-listed stocks in the 60s but hovers around 80% for all periods thereafter. We can ignore the erratic coverage of securities that belong to the other category since there is only a handful of them anyway in our sample.\\index{Exchange!NYSE}\\index{Exchange!AMEX}\\index{Exchange!NASDAQ}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrsp_monthly |>\n  group_by(permno, year = year(month)) |>\n  filter(date == max(date)) |>\n  ungroup() |>\n  left_join(compustat, by = c(\"gvkey\", \"year\")) |>\n  group_by(exchange, year) |>\n  summarize(\n    share = n_distinct(permno[!is.na(be)]) / n_distinct(permno),\n    .groups = \"drop\"\n  ) |>\n  ggplot(aes(\n    x = year, \n    y = share, \n    color = exchange,\n    linetype = exchange\n    )) +\n  geom_line() +\n  labs(\n    x = NULL, y = NULL, color = NULL, linetype = NULL,\n    title = \"Share of securities with book equity values by exchange\"\n  ) +\n  scale_y_continuous(labels = percent) +\n  coord_cartesian(ylim = c(0, 1))\n```\n\n::: {.cell-output-display}\n![End-of-year share of securities with book equity values by listing exchange.](wrds-crsp-and-compustat_files/figure-html/fig-215-1.png){#fig-215 fig-alt='Title: Share of securities with book equity values by exchange. The figure shows a line chart of end-of-year shares of securities with book equity values by exchange from 1960 to 2022 with years on the horizontal axis and the corresponding share on the vertical axis. After an initial period with lower coverage in the early 1960s, typically, more than 80 percent of the entries in the CRSP sample have information about book equity values from Compustat.' width=2100}\n:::\n:::\n\n\n## Some Tricks for PostgreSQL Databases\n\nAs we mentioned above, the WRDS database runs on PostgreSQL rather than SQLite. Finding the right tables for your data needs can be tricky in the WRDS PostgreSQL instance, as the tables are organized in schemas.\\index{Database!Schema} If you wonder what the purpose of schemas is, check out [this documetation.](https://www.postgresql.org/docs/9.1/ddl-schemas.html) For instance, if you want to find all tables that live in the `crsp` schema, you run\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListObjects(wrds, Id(schema = \"crsp\"))\n```\n:::\n\n\nThis operation returns a list of all tables that belong to the `crsp` family on WRDS, e.g., `<Id> schema = crsp, table = msenames`. Similarly, you can fetch a list of all tables that belong to the `comp` family via\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListObjects(wrds, Id(schema = \"comp\"))\n```\n:::\n\n\nIf you want to get all schemas, then run\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListObjects(wrds)\n```\n:::\n\n\n## Exercises\n\n1. Check out the structure of the WRDS database by sending queries in the spirit of [\"Querying WRDS Data using R\"](https://wrds-www.wharton.upenn.edu/pages/support/programming-wrds/programming-r/querying-wrds-data-r/) and verify the output with `dbListObjects()`. How many tables are associated with CRSP? Can you identify what is stored within *msp500*?\n1. Compute `mkt_cap_lag` using `lag(mktcap)` rather than joins as above. Filter out all the rows where the lag-based market capitalization measure is different from the one we computed above. Why are they different?\n1. In the main part, we look at the distribution of market capitalization across exchanges and industries. Now, plot the average market capitalization of firms for each exchange and industry. What do you find?\n1. `datadate` refers to the date to which the fiscal year of a corresponding firm refers to. Count the number of observations in Compustat by *month* of this date variable. What do you find? What does the finding suggest about pooling observations with the same fiscal year?\n1. Go back to the original Compustat data in `funda_db` and extract rows where the same firm has multiple rows for the same fiscal year. What is the reason for these observations?\n1. Repeat the analysis of market capitalization for book equity, which we computed from the Compustat data. Then, use the matched sample to plot book equity against market capitalization. How are these two variables related?",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}