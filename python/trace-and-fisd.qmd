---
title: TRACE and FISD
metadata:
  pagetitle: TRACE and FISD with Python
  description-meta: Download and prepare corporate bond data such as TRACE and FISD from WRDS using the programming language Python. 
---

```{python}
#| echo: false
#| output: false
import pre_render_script

# Load wrds secrets from .env
import os
from dotenv import load_dotenv
load_dotenv()
```

::: {.callout-note}
You are reading the work-in-progress edition of **Tidy Finance with Python**. Code chunks and text might change over the next couple of months. We are always looking for feedback via [contact\@tidy-finance.org](mailto:contact@tidy-finance.org). Meanwhile, you can find the complete R version [here](../r/index.qmd).
:::

In this chapter, we dive into the US corporate bond market. Bond markets are far more diverse than stock markets, as most issuers have multiple bonds outstanding simultaneously with potentially very different indentures. This market segment is exciting due to its size (roughly 10 trillion USD outstanding), heterogeneity of issuers (as opposed to government bonds), market structure (mostly over-the-counter trades), and data availability. We introduce how to use bond characteristics from FISD and trade reports from TRACE and provide code to download and clean TRACE in Python.

Many researchers study liquidity in the US corporate bond market [see, e.g., @bessembinder2006, @Edwards2007, and @Ohara2021, among many others]. We do not cover bond returns here, but you can compute them from TRACE data. Instead, we refer to studies on the topic such as @Bessembinder2008, @bai2019, and @kelly2020 and a survey by @Huang2021. 

This chapter also draws on the resources provided by the project [Open Source Bond Asset Pricing](https://openbondassetpricing.com/) and their related publication @Dickerson2023. We encourage you to visit their website to check out the additional resources they provide. Moreover, WRDS provides bond returns computed from TRACE data at a monthly frequency.\index{Corporate bonds}

The current chapter relies on this set of Python packages. 

```{python}
import pandas as pd
import numpy as np
import sqlite3
from sqlalchemy import create_engine

```

Compared to previous chapters, we load `httpimport` [@httpimport] to source code provided in the public [gist.](https://docs.github.com/en/get-started/writing-on-github/editing-and-sharing-content-with-gists/creating-gists) Note that you should be careful with loading anything from the web via this method, and it is highly discouraged to use any unsecure "HTTP" links.

## Bond Data from WRDS 

Both bond databases we need are available on [WRDS](https://wrds-www.wharton.upenn.edu/) to which we establish the `RPostgres` connection described in [WRDS, CRSP, and Compustat](wrds-crsp-and-compustat.qmd). Additionally, we connect to our local `SQLite`-database to store the data we download.\index{WRDS}

```{python}
connection_string = (
  "postgresql+psycopg2://" + 
  os.getenv("WRDS_USER") + ":" + 
  os.getenv("WRDS_PASSWORD") +
  "@wrds-pgdata.wharton.upenn.edu:9737/wrds"
)
wrds = create_engine(connection_string, pool_pre_ping=True)

tidy_finance = sqlite3.connect(
  database="data/tidy_finance_python.sqlite"
)
```


## Mergent FISD

For research on US corporate bonds, the Mergent Fixed Income Securities Database (FISD) is the primary resource for bond characteristics.\index{Data!FISD} There is a [detailed manual](https://wrds-www.wharton.upenn.edu/documents/1364/FixedIncome_Securities_Master_Database_User_Guide_v4.pdf) on WRDS, so we only cover the necessary subjects here. FISD data comes in two main variants, namely, centered on issuers or issues. In either case, the most useful identifiers are [CUSIPs.](https://www.cusip.com/index.html) 9-digit CUSIPs identify securities issued by issuers. The issuers can be identified from the first six digits of a security CUSIP, which is also called 6-digit CUSIP. Both stocks and bonds have CUSIPs.\index{CUSIP} This connection would, in principle, allow matching them easily, but due to changing issuer details, this approach only yields small coverage.

We use the issue-centered version of FISD to identify the subset of US corporate bonds that meet the standard criteria [@bessembinder2006]. The WRDS table `fisd_mergedissue` contains most of the information we need on a 9-digit CUSIP level. Due to the diversity of corporate bonds, details in the indenture vary significantly. We focus on common bonds that make up the majority of trading volume in this market without diverging too much in indentures. 

The following chunk connects to the data and selects the bond sample to remove certain bond types that are less commonly used [see, e.g., @Dick2012; @Ohara2021, among many others].

```{python}
fisd_query = (
  """SELECT complete_cusip, maturity,
            offering_amt, offering_date,
            dated_date, 
            interest_frequency, coupon,
            last_interest_date, 
            issue_id, issuer_id
        FROM fisd.fisd_mergedissue
        WHERE security_level = 'SEN'
              AND (slob = 'N' OR slob IS NULL)
              AND security_pledge IS NULL
              AND (asset_backed = 'N' OR asset_backed IS NULL)
              AND (defeased = 'N' OR defeased IS NULL)
              AND defeased_date IS NULL
              AND bond_type IN ('CDEB', 'CMTN', 'CMTZ', 'CZ', 'USBN')
              AND (pay_in_kind != 'Y' OR pay_in_kind IS NULL)
              AND pay_in_kind_exp_date IS NULL
              AND (yankee = 'N' OR yankee IS NULL)
              AND (canadian = 'N' OR canadian IS NULL)
              AND foreign_currency = 'N'
              AND coupon_type IN ('F', 'Z') 
              AND fix_frequency IS NULL
              AND coupon_change_indicator = 'N'
              AND interest_frequency IN ('0', '1', '2', '4', '12')
              AND rule_144a = 'N'
              AND (private_placement = 'N' OR private_placement IS NULL)
              AND defaulted = 'N'
              AND filing_date IS NULL
              AND settlement IS NULL
              AND convertible = 'N'
              AND exchange IS NULL
              AND (putable = 'N' OR putable IS NULL)
              AND (unit_deal = 'N' OR unit_deal IS NULL)
              AND (exchangeable = 'N' OR exchangeable IS NULL)
              AND perpetual = 'N'
              AND (preferred_security = 'N' OR preferred_security IS NULL)"""
)

fisd = (pd.read_sql_query(
    sql=fisd_query,
    con=wrds)
)
```

We also pull issuer information from `fisd_mergedissuer` regarding the industry and country of the firm that issued a particular bond. Then, we filter to include only US-domiciled firms' bonds. We match the data by `issuer_id`.

```{python}
fisd_issuer_query = (
  """SELECT issuer_id, sic_code, country_domicile
        FROM fisd.fisd_mergedissuer"""
)

fisd_issuer = (pd.read_sql_query(
    sql=fisd_issuer_query,
    con=wrds)
)

fisd = (fisd
  .merge(fisd_issuer, how="inner", on="issuer_id")
  .query("country_domicile == 'USA'")
  .drop(columns="country_domicile")
)
```

Finally, we save the bond characteristics to our local database. This selection of bonds also constitutes the sample for which we will collect trade reports from TRACE below.

```{python}
#| output: false
(fisd
  .to_sql(name="fisd", 
          con=tidy_finance, 
          if_exists="replace",
          index = False)
)
```

The FISD database also contains other data. The issue-based file contains information on covenants, i.e., restrictions included in bond indentures to limit specific actions by firms [e.g., @handler2021]. Moreover, FISD also provides information on bond ratings. We do not need either here.

## TRACE

The Financial Industry Regulatory Authority (FINRA) provides the Trade Reporting and Compliance Engine (TRACE).\index{Data!TRACE} In TRACE, dealers that trade corporate bonds must report such trades individually. Hence, we observe trade messages in TRACE that contain information on the bond traded, the trade time, price, and volume. TRACE comes in two variants; standard and enhanced TRACE. We show how to download and clean enhanced TRACE as it contains uncapped volume, a crucial quantity missing in the standard distribution. Moreover, enhanced TRACE also provides information on the respective parties' roles and the direction of the trade report. These items become essential in cleaning the messages.

Why do we repeatedly talk about cleaning TRACE? Trade messages are submitted within a short time window after a trade is executed (less than 15 minutes). These messages can contain errors, and the reporters subsequently correct them or they cancel a trade altogether. The cleaning needs are described by @Dick2009 in detail, and @Dick2014 shows how to clean the enhanced TRACE data using SAS. We do not go into the cleaning steps here, since the code is lengthy and serves no educational purpose. However, downloading and cleaning enhanced TRACE data is straightforward with our setup.

We store code for cleaning enhanced TRACE with Python on the following Github [gist.](https://gist.github.com/patrick-weiss/86ddef6de978fbdfb22609a7840b5d8b) \index{Github!Gist}. The appendix also contains the code for reference. We only need to source the code from the gist, which we can do with with the code below using `httpimport`. Alternatively, you can also go to the gist, download it, and manually execute it. The `clean_enhanced_trace()` function takes a vector of CUSIPs, a connection to WRDS explained in [WRDS, CRSP, and Compustat](wrds-crsp-and-compustat.qmd), and a start and end date, respectively.

```{python}
gist_url = "https://gist.github.com/patrick-weiss/86ddef6de978fbdfb22609a7840b5d8b"

with httpimport.remote_repo(gist_url):
  import cleaning_function
```


